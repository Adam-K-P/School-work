head	1.46;
access;
symbols;
locks;
comment	@ * @;


1.46
date	2015.02.27.03.10.25;	author -;	state -;
branches;
next	1.45;

1.45
date	2015.02.27.03.09.47;	author -;	state -;
branches;
next	1.44;

1.44
date	2015.02.27.03.01.36;	author -;	state -;
branches;
next	1.43;

1.43
date	2015.02.27.03.01.06;	author -;	state -;
branches;
next	1.42;

1.42
date	2015.02.27.03.00.14;	author -;	state -;
branches;
next	1.41;

1.41
date	2015.02.27.02.56.45;	author -;	state -;
branches;
next	1.40;

1.40
date	2015.02.27.02.52.58;	author -;	state -;
branches;
next	1.39;

1.39
date	2015.02.27.02.52.38;	author -;	state -;
branches;
next	1.38;

1.38
date	2015.02.27.02.51.10;	author -;	state -;
branches;
next	1.37;

1.37
date	2015.02.27.02.46.07;	author -;	state -;
branches;
next	1.36;

1.36
date	2015.02.27.02.45.51;	author -;	state -;
branches;
next	1.35;

1.35
date	2015.02.27.02.44.34;	author -;	state -;
branches;
next	1.34;

1.34
date	2015.02.27.02.42.22;	author -;	state -;
branches;
next	1.33;

1.33
date	2015.02.27.02.41.16;	author -;	state -;
branches;
next	1.32;

1.32
date	2015.02.27.02.36.20;	author -;	state -;
branches;
next	1.31;

1.31
date	2015.02.27.02.35.32;	author -;	state -;
branches;
next	1.30;

1.30
date	2015.02.27.02.35.06;	author -;	state -;
branches;
next	1.29;

1.29
date	2015.02.27.02.30.01;	author -;	state -;
branches;
next	1.28;

1.28
date	2015.02.27.02.28.56;	author -;	state -;
branches;
next	1.27;

1.27
date	2015.02.27.02.26.59;	author -;	state -;
branches;
next	1.26;

1.26
date	2015.02.27.02.26.27;	author -;	state -;
branches;
next	1.25;

1.25
date	2015.02.27.02.25.46;	author -;	state -;
branches;
next	1.24;

1.24
date	2015.02.27.02.25.34;	author -;	state -;
branches;
next	1.23;

1.23
date	2015.02.27.02.25.01;	author -;	state -;
branches;
next	1.22;

1.22
date	2015.02.27.02.16.37;	author -;	state -;
branches;
next	1.21;

1.21
date	2015.02.27.02.15.33;	author -;	state -;
branches;
next	1.20;

1.20
date	2015.02.27.02.12.19;	author -;	state -;
branches;
next	1.19;

1.19
date	2015.02.25.03.38.20;	author -;	state -;
branches;
next	1.18;

1.18
date	2015.02.25.03.34.09;	author -;	state -;
branches;
next	1.17;

1.17
date	2015.02.24.07.29.46;	author -;	state -;
branches;
next	1.16;

1.16
date	2015.02.24.07.28.43;	author -;	state -;
branches;
next	1.15;

1.15
date	2015.02.24.06.20.46;	author -;	state -;
branches;
next	1.14;

1.14
date	2015.02.24.06.20.18;	author -;	state -;
branches;
next	1.13;

1.13
date	2015.02.24.06.19.58;	author -;	state -;
branches;
next	1.12;

1.12
date	2015.02.24.06.19.27;	author -;	state -;
branches;
next	1.11;

1.11
date	2015.02.24.06.18.52;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.02.27.20.12.24;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.05.01.20.22.44;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.02.16.01.17.42;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.02.12.03.17.45;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.02.12.03.17.19;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.02.12.03.15.55;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.02.12.03.12.42;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.11.02.02.34.52;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.02.21.22.57.52;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.02.15.04.32.33;	author -;	state -;
branches;
next	;


desc
@@


1.46
log
@-
@
text
@// Adam Pinarbasi akpinarb
// $Id: queue.c,v 1.20 2015-02-26 18:12:19-08 - - $

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "queue.h"

#define STUBPRINTF(...) fprintf (stderr, __VA_ARGS__);

typedef struct queue_node queue_node;
struct queue_node {
   queue_item_t item;
   queue_node *link;
};

typedef struct queue queue;
struct queue {
   queue_node *front;
   queue_node *rear;
   queue_node *curr;
};

queue *new_queue (void) {
   queue *this = malloc(sizeof(queue));
   this->front = NULL;
   this->rear = NULL;
   this->curr = NULL;
   return this;
}

void free_queue (queue *this) {
   assert (isempty_queue (this));
   for(queue_node *curr = this->front; curr != NULL;){
      queue_node *temp = curr->link;
      free(curr->item);
      free(curr);
      curr = temp;
   }
   free (this);
}

void insert_queue (queue *this, queue_item_t item) {
   queue_node *this_node = malloc(sizeof(queue_node));   
   this_node->item = item;
   this_node->link = NULL;
   if(this->front == NULL)
      this->front = this->curr = this_node;
   else this->rear->link = this_node;
   this->rear = this_node;
}

queue_item_t remove_queue (queue *this) {
   queue_item_t temp = this->curr->item;
   this->curr = this->curr->link;
   return temp;
}

bool isempty_queue (queue *this) {
   return this->curr == NULL;
}

bool isempty_queue_front (queue *this) {
   return this->front == NULL;
}

@


1.45
log
@-
@
text
@d17 1
a17 1
}
d24 1
a24 1
}
@


1.44
log
@-
@
text
@d1 1
d17 1
a17 1
};
d24 1
a24 1
};
@


1.43
log
@-
@
text
@d37 1
a38 1
      free(curr->item);
@


1.42
log
@-
@
text
@d38 1
@


1.41
log
@-
@
text
@d35 4
a38 6
   while(! isempty_queue_front(this)){
      queue_node *temp = NULL;
      if(this->front->link != NULL) 
         temp = this->front->link;
      free(this->front);
      this->front = temp;
@


1.40
log
@-
@
text
@d27 3
@


1.39
log
@-
@
text
@d37 1
a37 1
      front = temp;
@


1.38
log
@-
@
text
@d33 1
a33 1
      queue_node temp = NULL;
@


1.37
log
@-
@
text
@d32 7
a54 1
   free(this->curr);
d62 4
@


1.36
log
@-
@
text
@d48 1
a48 1
   free(curr);
@


1.35
log
@-
@
text
@d48 1
@


1.34
log
@-
@
text
@d40 1
a40 1
      this->front = this_node;
d46 2
a47 2
   queue_item_t temp = this->front->item;
   this->front = this->front->link;
d52 1
a52 1
   return this->front == NULL;
@


1.33
log
@-
@
text
@d40 1
a40 1
      this->front = this->curr = this_node;
d46 2
a47 2
   queue_item_t temp = this->curr->item;
   this->curr = this->curr->link;
@


1.32
log
@-
@
text
@d40 1
a40 1
      this->front = this_node;
a42 1
   this->curr = this->front;
@


1.31
log
@-
@
text
@d43 1
d47 2
a48 2
   queue_item_t temp = this->front->item;
   this->front = this->front->link;
@


1.30
log
@-
@
text
@a42 1
   this->curr = this->front;
d46 2
a47 2
   queue_item_t temp = this->curr->item;
   this->curr = this->curr->link;
@


1.29
log
@-
@
text
@d22 1
d43 1
d47 2
a48 2
   queue_item_t temp = this->front->item;
   this->front = this->front->link;
@


1.28
log
@-
@
text
@d46 1
a46 1
   this = this->link;
@


1.27
log
@-
@
text
@d45 3
a47 2
   assert (! isempty_queue (this));
   return this->rear->item;
@


1.26
log
@-
@
text
@d46 1
a46 2
   STUBPRINTF ("return NULL\n");
   return NULL;
@


1.25
log
@-
@
text
@d38 1
a38 1
   if(this->front == NULL) 
d40 1
a40 1
   this->rear->link = this_node;
@


1.24
log
@-
@
text
@d16 1
a16 1
}
d22 1
a22 1
}
d38 1
a38 2
   if(this->front == NULL) {
      this->rear = this_node;
d40 1
a40 2
   }
   else this->rear->link = this_node;
d46 2
a47 1
   return this->rear->item;
@


1.23
log
@-
@
text
@a48 2


@


1.22
log
@-
@
text
@d16 1
a16 1
};
d22 1
a22 1
};
d48 3
a50 2
   STUBPRINTF ("return NULL\n");
   return NULL;
@


1.21
log
@-
@
text
@d42 1
a42 1
   this->rear->link = this_node;
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.10 2014-02-27 12:12:24-08 - - $
d38 2
a39 1
   if(this->front == NULL) 
d41 1
@


1.19
log
@-
@
text
@d40 1
a40 1
   this->(rear->link) = this_node;
@


1.18
log
@-
@
text
@d40 1
a40 1
   this->rear->link = this_node;
@


1.17
log
@-
@
text
@d40 1
a40 2
   else 
      this->rear->link = this_node;
d45 1
a45 1
   //assert (! isempty_queue (this));
@


1.16
log
@-
@
text
@d46 1
a46 1
   assert (! isempty_queue (this));
@


1.15
log
@-
@
text
@d35 8
a42 1
   printf("test");
@


1.14
log
@-
@
text
@d25 2
a26 2
   queue this = malloc(sizeof(queue));
   return &this;
@


1.13
log
@-
@
text
@d26 1
a26 1
   return this;
@


1.12
log
@-
@
text
@d18 1
@


1.11
log
@-
@
text
@d34 1
a34 1
   if(
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.9 2013-05-01 13:22:44-07 - - $
d24 2
a25 2
   STUBPRINTF ("return NULL\n");
   return NULL;
d34 1
a34 1
   STUBPRINTF ("item = \"%s\"\n", item);
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.8 2013-02-15 17:17:42-08 - - $
d34 1
a34 1
   STUBPRINTF ("item =\n\t\"%s\"\n", item);
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.7 2013-02-11 19:17:45-08 - - $
a11 3
static char *queue_tag = "struct queue";
static char *queue_node_tag = "struct queue_node";

a13 1
   char *tag;
a18 1
   char *tag;
a28 1
   assert (is_queue (this));
a29 1
   memset (this, 0, sizeof (queue));
a33 1
   assert (is_queue (this));
a37 1
   assert (is_queue (this));
a43 1
   assert (is_queue (this));
a46 4
bool is_queue (queue *this) {
   return this != NULL && this->tag == queue_tag;
}

@


1.7
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.6 2013-02-11 19:17:19-08 - - $ */
@


1.6
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.5 2013-02-11 19:15:55-08 - - $ */
d36 1
a36 1
   memset (queue, 0, sizeof (struct queue));
@


1.5
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.4 2013-02-11 19:12:42-08 - - $ */
d13 1
a13 1
static char *queuenode_tag = "struct queuenode";
d15 2
a16 3
typedef struct queuenode queuenode;

struct queuenode {
d19 1
a19 1
   queuenode_ref link;
d24 2
a25 2
   queuenode_ref front;
   queuenode_ref rear;
@


1.4
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.3 2012-11-01 19:34:52-07 - - $ */
d15 1
a15 1
typedef struct queuenode *queuenode_ref;
d34 3
a36 3
void free_queue (queue *queue) {
   assert (is_queue (queue));
   assert (isempty_queue (queue));
d38 1
a38 1
   free (queue);
d41 2
a42 2
void insert_queue (queue *queue, queue_item_t item) {
   assert (is_queue (queue));
d46 3
a48 3
queue_item_t remove_queue (queue *queue) {
   assert (is_queue (queue));
   assert (! isempty_queue (queue));
d53 3
a55 3
bool isempty_queue (queue *queue) {
   assert (is_queue (queue));
   return queue->front == NULL;
d58 2
a59 2
bool is_queue (queue *queue) {
   return queue != NULL && queue->tag == queue_tag;
@


1.3
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.2 2012-02-21 14:57:52-08 - - $ */
d29 1
a29 1
queue_ref new_queue (void) {
d34 1
a34 1
void free_queue (queue_ref queue) {
d41 1
a41 1
void insert_queue (queue_ref queue, queue_item_t item) {
d46 1
a46 1
queue_item_t remove_queue (queue_ref queue) {
d53 1
a53 1
bool isempty_queue (queue_ref queue) {
d58 1
a58 1
bool is_queue (queue_ref queue) {
@


1.2
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.1 2012-02-14 20:32:33-08 - - $ */
a54 1
   // LINTED (assignment of 32-bit integer to 8-bit integer)
a58 1
   // LINTED (assignment of 32-bit integer to 8-bit integer)
@


1.1
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.2 2012-02-14 20:32:06-08 - - $ */
d55 1
d60 1
@
