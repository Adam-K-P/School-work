head	1.5;
access;
symbols;
locks;
comment	@ * @;


1.5
date	2015.02.12.05.58.11;	author -;	state -;
branches;
next	1.4;

1.4
date	2015.02.12.05.46.54;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.02.12.05.45.15;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.02.12.05.41.58;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.02.12.05.41.16;	author -;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@// $Id: list4.c,v 1.4 2015-02-11 21:46:54-08 - - $

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>

typedef struct node node;
struct node {
   char *word;
   node *link;
};

int main (int argc, char **argv) {
   node *head = NULL;
   for (int argi = 0; argi < 5; ++argi) {
      node *node = malloc (sizeof (struct node));
      assert (node != NULL);
      node->word = argv[argi];
      node->link = head;
      head = node;
   }
   for(node *curr = head; curr!=NULL; curr = curr->link) {
      printf ("%p->node {word=%p->[%s], link=%p}\n",
              curr, curr->word, curr->word, curr->link);
      free(curr);
   }
   return 9;
}
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.3 2015-02-11 21:45:15-08 - - $
d22 1
a22 1
   for(node *curr = head; curr->link!=NULL; curr = curr->link) {
a26 1
   free(curr);
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.2 2015-02-11 21:41:58-08 - - $
d27 1
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.1 2015-02-11 21:41:16-08 - - $
a20 1
      free(node);
d25 1
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: list3.c,v 1.5 2015-02-11 21:35:03-08 - - $
d10 1
a10 1
   node *link = NULL;
@
