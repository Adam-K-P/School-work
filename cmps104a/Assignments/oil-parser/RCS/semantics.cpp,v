head	1.4;
access;
symbols;
locks;
comment	@// @;


1.4
date	2014.12.11.23.47.31;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.11.26.01.14.38;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.11.21.02.12.18;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.11.21.01.38.13;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@// $Id: semantics.cpp,v 1.3 2014-11-25 17:14:38-08 - - $

#include <cstdlib>
#include <cstring>
#include <initializer_list>
#include <iostream>
#include <libgen.h>
#include <string>
using namespace std;

#include "semantics.h"

string this_progname; // Name of this program.
string oil_filename; // Name of the program.oil to be compiled.
string oil_execname; // Executable name created from oil & oclib.

void yyerror (const char* error) {
   cerr << oil_filename << ":" << lex_linenr << ":" << lex_offset
        << ": error: " << error << endl;
}

void error (initializer_list<string> args, int status = EXIT_FAILURE) {
   cerr << this_progname << ": ";
   for (const string& str: args) cerr << str;
   cerr << endl;
   if (status != 0) exit (status);
}

void status_report (int status) {
   if (status == -1) {
      error ({"gcc: ", strerror (errno)});
   }else if (status & 0x7F) {
      status &= 0x7F;
      error ({"gcc: caught signal ", to_string (status)}, status + 128);
   }else {
      status >>= 8;
      error ({"gcc: exit status ", to_string (status)}, status);
   }
}

void set_oil_execname() {
   oil_execname = oil_filename;
   size_t size = oil_execname.size();
   if (size < 4 or oil_execname.substr (size - 4) != ".oil") {
      error ({oil_filename, ": suffix not .oil"});
   }
   oil_execname = oil_filename.substr (0, size - 4);
}


int main (int argc, char** argv) {
   this_progname = basename (argv[0]);
   yy_flex_debug = 0;
   yydebug = 0;
   if (argc != 2) error ({"Usage: ", this_progname, " oil_filename"});
   cout << this_progname << ": version " << __DATE__ << " " << __TIME__
        << endl;
   oil_filename = argv[1];
   set_oil_execname();
   yyin = fopen (oil_filename.c_str(), "r");
   if (yyin == NULL) error ({oil_filename, ": ", strerror (errno)});
   int yycode = yyparse();
   if (yycode != 0) error ({"parse of ", oil_filename, " returned ",
                           to_string (yycode)});
   string command = string ("gcc -g -o ") + oil_execname + " -x c "
                  + oil_filename + " oclib.c";
   cout << this_progname << ": running: " << command << endl;
   int status = system (command.c_str());
   status_report (status);
   return EXIT_SUCCESS;
}

@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: semantics.cpp,v 1.2 2014-11-20 18:12:18-08 - - $
a7 1
#include <sstream>
d13 3
a15 3
string progname; // Name of this program.
string filename; // Name of the program.oil to be compiled.
string execname; // Executable name created from oil & oclib.
d18 1
a18 1
   cerr << filename << ":" << lex_linenr << ":" << lex_offset
d23 1
a23 1
   cerr << progname << ": ";
d41 5
a45 5
void set_execname() {
   execname = filename;
   size_t size = execname.size();
   if (size < 4 or execname.substr (size - 4) != ".oil") {
      error ({filename, ": suffix not .oil"});
d47 1
a47 1
   execname = filename.substr (0, size - 4);
d50 1
d52 1
a52 1
   progname = basename (argv[0]);
d55 7
a61 5
   if (argc != 2) error ({"Usage: ", progname, " filename"});
   filename = argv[1];
   set_execname();
   yyin = fopen (filename.c_str(), "r");
   if (yyin == NULL) error ({filename, ": ", strerror (errno)});
d63 1
a63 1
   if (yycode != 0) error ({"parse of ", filename, " returned ",
d65 5
a69 4
   string command = string ("gcc -g -o ") + execname + " -x c "
                  + filename + " oclib.c";
   cout << progname << ": running: " << command << endl;
   status_report (system (command.c_str()));
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: semantics.cpp,v 1.1 2014-11-20 17:38:13-08 - - $
d5 1
d8 2
d14 3
a16 4
string progname;
string filename;
size_t lex_linenr = 1;
size_t lex_offset = 0;
d18 3
a20 2
void lex_yyleng() {
   lex_offset += yyleng;
d23 5
a27 3
void lex_newline() {
   ++lex_linenr;
   lex_offset = 0;
d30 10
a39 2
void lex_error() {
   yyerror ((string ("stray '") + yytext + "' in program").c_str());
d42 7
a48 3
void yyerror (const char* error) {
   cerr << filename << ":" << lex_linenr << ":" << lex_offset
        << ": error: " << error << endl;
d55 1
a55 4
   if (argc != 2) {
      cerr << "Usage: " << progname << " filename" << endl;
      exit (EXIT_FAILURE);
   }
d57 1
a57 8
   string execname = filename;
   if (execname.size() < 4 or
       execname.substr (execname.size() - 4) != ".oil" ){
      cerr << progname << ": " << filename
           << ": invalid suffix, not .oil" << endl;
      exit (EXIT_FAILURE);
   }
   execname = filename.substr (0, execname.size() - 4);
d59 4
a62 10
   if (yyin == NULL) {
      cerr << progname << ": " << filename << ": " << strerror (errno)
           << endl;
      exit (EXIT_FAILURE);
   }
   int parse = yyparse();
   if (parse != 0) {
      cerr << progname << ": parse of " << filename << " returned "
           << parse << endl;
   }
d65 3
a67 7
   cout << filename << ": running " << command << endl;
   int status = system (command.c_str());
   if (status != 0) {
      if (status & 0x7F) status = (status & 0x7F) | 0x80;
                    else status = status >> 8;
   }
   return status;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d3 2
d6 1
a6 1
#incluee <libgen.h>
d16 1
a16 1
void lex_offset() {
d30 2
a31 2
   cerr << ":" << lex_linenr << ":" << lex_offset << ": error: "
        << error << endl;
d36 2
d40 1
a40 1
      exit (1);
d43 9
a51 1
   yyin = fopen (filename, "r");
d55 1
a55 1
      exit (1);
d58 13
a70 2
   cout << "yyparse() returned " << parse << endl;
   exit (0);
@
