head	1.14;
access;
symbols;
locks;
comment	@ * @;


1.14
date	2014.11.26.01.14.38;	author -;	state -;
branches;
next	1.13;

1.13
date	2014.11.21.02.22.30;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.11.21.02.12.18;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.11.21.01.38.13;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.11.21.01.37.10;	author -;	state -;
branches;
next	1.9;

1.9
date	2014.11.21.01.33.22;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.11.20.23.08.08;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.11.20.21.49.51;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.11.20.00.37.44;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.11.20.00.37.06;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.11.20.00.33.41;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.11.20.00.19.28;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.11.19.01.13.16;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.11.14.04.23.35;	author -;	state -;
branches;
next	;


desc
@@


1.14
log
@-
@
text
@%{
// $Id: scanner.l,v 1.13 2014-11-20 18:22:30-08 - - $

#include <ctype.h>

#include "parser.h"
#include "semantics.h"

#define YY_USER_ACTION { lex_offset += yyleng; }

int lex_linenr = 1;
int lex_offset = 0;

void lex_newline() {
   lex_offset = 0; ++lex_linenr;
}

void lex_error() {
   char message[64];
   sprintf (message, isprint (*yytext)
            ? "stray '%c' in program"
            : "stray '\x02X' in nprogram", *yytext);
   yyerror (message);
}

%}

%option 8bit
%option debug
%option nodefault
%option nounput
%option noyywrap
%option verbose
%option warn
%option yylineno

CHARCON    ('([^\\'\n]|\\[\\'"0nt])')
STRINGCON  (\"([^\\"\n]|\\[\\'"0nt])*\")
INTCON     (0|[1-9][0-9]*)
IDENT      ([[:alpha:]_][[:alnum:]_]*)

/**/
%%

"!"           { return '!'; }
"%"           { return '%'; }
"("           { return '('; }
")"           { return ')'; }
"*"           { return '*'; }
"+"           { return '+'; }
","           { return ','; }
"-"           { return '-'; }
"/"           { return '/'; }
"&"           { return '&'; }
";"           { return ';'; }
":"           { return ':'; }
"<"           { return '<'; }
"="           { return '='; }
">"           { return '>'; }
"{"           { return '{'; }
"}"           { return '}'; }
"\n"          { lex_newline(); return '\n'; }

"->"          { return PTR; }
"!="          { return NE; }
"<="          { return LT; }
"=="          { return EQ; }
">="          { return GE; }

char          { return CHAR; }
goto          { return GOTO; }
if            { return IF; }
int           { return INT; }
return        { return RETURN; }
sizeof        { return SIZEOF; }
struct        { return STRUCT; }
void          { return VOID; }

{CHARCON}     { return CHARCON; }
{STRINGCON}   { return STRINGCON; }
{INTCON}      { return INTCON; }
{IDENT}       { return IDENT; }

[ \t]+        { }
.             { lex_error(); }

%%

@


1.13
log
@-
@
text
@d2 3
a4 1
// $Id: scanner.l,v 1.12 2014-11-20 18:12:18-08 - - $
d9 16
a24 1
#define YY_USER_ACTION { lex_yyleng(); }
d42 1
d45 41
a85 41
"!"             { return '!'; }
"%"             { return '%'; }
"("             { return '('; }
")"             { return ')'; }
"*"             { return '*'; }
"+"             { return '+'; }
","             { return ','; }
"-"             { return '-'; }
"/"             { return '/'; }
";"             { return ';'; }
":"             { return ':'; }
"<"             { return '<'; }
"="             { return '='; }
">"             { return '>'; }
"{"             { return '{'; }
"}"             { return '}'; }
"\n"            { lex_newline(); return '\n'; }

"->"            { return PTR; }
"!="            { return NE; }
"<="            { return LT; }
"=="            { return EQ; }
">="            { return GE; }

char            { return CHAR; }
goto            { return GOTO; }
if              { return IF; }
int             { return INT; }
return          { return RETURN; }
sizeof          { return SIZEOF; }
struct          { return STRUCT; }
void            { return VOID; }

{CHARCON}       { return CHARCON; }
{STRINGCON}     { return STRINGCON; }
{INTCON}        { return INTCON; }
{IDENT}         { return IDENT; }

[ \t]+          { }
"//".*          { }
.               { lex_error(); }
@


1.12
log
@-
@
text
@d2 1
a2 1
// $Id: scanner.l,v 1.11 2014-11-20 17:38:13-08 - - $
d51 1
@


1.11
log
@-
@
text
@d2 1
a2 1
// $Id: scanner.l,v 1.10 2014-11-20 17:37:10-08 - - $
d7 1
a7 1
#define YY_USER_ACTION { lex_offset(); }
d55 1
@


1.10
log
@-
@
text
@d2 1
a2 1
// $Id: scanner.l,v 1.9 2014-11-20 17:33:22-08 - - $
d43 1
a43 1
"\n"            { lex_newline(); return NL; }
@


1.9
log
@-
@
text
@d2 1
a2 1
// $Id: scanner.l,v 1.7 2014-11-20 13:49:51-08 - - $
d65 1
a65 1
.               { lex_badchar(); }
@


1.8
log
@-
@
text
@d5 4
d18 1
d43 1
a43 1
"\n"            { return NL'; }
d65 1
@


1.7
log
@-
@
text
@d2 1
a2 1
// $Id: scanner.l,v 1.6 2014-11-19 16:37:44-08 - - $
d31 1
a31 1
";\n"           { return ';'; }
d38 1
a38 1
"\n"            { return '\n'; }
d59 1
@


1.6
log
@-
@
text
@d2 1
a2 1
// $Id: scanner.l,v 1.5 2014-11-19 16:37:06-08 - - $
d40 12
a51 15
"->"            { return TOK_PTR; }
"!="            { return TOK_NE; }
"<="            { return TOK_LT; }
"=="            { return TOK_EQ; }
">="            { return TOK_GE; }

goto            { return TOK_goto; }
if              { return TOK_if; }
int             { return TOK_int; }
int\*           { return TOK_int_ptr; }
return          { return TOK_return; }
struct          { return TOK_struct; }
ubyte\*         { return TOK_ubyte_ptr; }
ubyte\*\*       { return TOK_ubyte_ptrptr; }
void            { return TOK_void; }
a56 2
{IDENT}\*       { return IDENT_ptr; }
{IDENT}\*\*     { return IDENT_ptrptr; }
@


1.5
log
@-
@
text
@d2 1
a2 1
// $Id: scanner.l,v 1.4 2014-11-19 16:33:41-08 - - $
d60 2
a61 2
{IDENT_ptr}     { return IDENT_ptr; }
{IDENT_ptrptr}  { return IDENT_ptrptr; }
@


1.4
log
@-
@
text
@d2 3
a4 1
// $Id: scanner.l,v 1.3 2014-11-19 16:19:28-08 - - $
@


1.3
log
@-
@
text
@d2 1
a2 1
// $Id: scanner.l,v 1.2 2014-11-18 17:13:16-08 - - $
d36 1
d47 1
a47 1
int\*           { return TOK_int_p; }
d50 2
a51 2
ubyte\*         { return TOK_ubyte_p; }
ubyte\*\*       { return TOK_ubyte_pp; }
d58 2
a59 2
{IDENT_p}       { return IDENT_p; }
{IDENT_pp}      { return IDENT_pp; }
d63 2
@


1.2
log
@-
@
text
@d2 1
a2 1
// $Id: scanner.l,v 1.1 2014-11-13 20:23:35-08 - - $
d46 1
d49 2
a50 1
ubyte           { return TOK_ubyte; }
d56 3
a58 1
{IDENT}         { return IDENTIFIER; }
@


1.1
log
@-
@
text
@d2 1
a2 1
// $Id$
d29 1
a29 1
";"             { return ';'; }
d56 2
@
