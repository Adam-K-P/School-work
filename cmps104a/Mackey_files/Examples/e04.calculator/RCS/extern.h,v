head	1.4;
access;
symbols;
locks;
comment	@ * @;


1.4
date	2014.10.24.23.32.04;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.09.06.03.24.24;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.09.06.02.21.46;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.09.06.01.40.21;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@// $Id: extern.h,v 1.3 2013-09-05 20:24:24-07 - - $

#ifndef __EXTERN_H__
#define __EXTERN_H__

//
// Include some things from STL.
//
#include <map>
#include <string>
using namespace std;

//
// A more compact representation should be used for efficiency.
// No token ever has both a symbol and a value.
//
struct yystype {
   string sym;
   double val;
};
extern map<string,double> symtab;

//
// External symbols.
//
extern int yy_flex_debug;
extern int yydebug;
void error (const string& message, const string& data);
void yyerror (const string& message);
int yylex (void);
int yyparse (void);
double sym_get (const string& symbol);
double sym_put (const string& symbol, double value);

//
// Include parser-generated symbols.
//
#define YYSTYPE yystype
#include "parser.h"

#endif

@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: extern.h,v 1.2 2013-09-05 19:21:46-07 - - $
d28 2
a29 2
void error (const string &message, const string &data);
void yyerror (const string &message);
d32 2
a33 2
double sym_get (const string &symbol);
double sym_put (const string &symbol, double value);
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: extern.h,v 1.1 2013-09-05 18:40:21-07 - - $
d28 1
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d14 2
a15 2
// Use a union here, since a token can not be both a symbol
// and a number.
d17 1
a17 1
union yystype {
d21 1
a21 1
extern map<string,yystype> symtab;
d28 1
a28 1
void yyerror (const char* message);
@
