head	1.13;
access;
symbols;
locks;
comment	@ * @;


1.13
date	2009.10.21.22.13.06;	author -;	state -;
branches;
next	1.12;

1.12
date	2008.11.05.02.13.48;	author -;	state -;
branches;
next	1.11;

1.11
date	2008.11.05.02.08.23;	author -;	state -;
branches;
next	1.10;

1.10
date	2008.11.05.02.03.19;	author -;	state -;
branches;
next	1.9;

1.9
date	2008.11.05.02.03.02;	author -;	state -;
branches;
next	1.8;

1.8
date	2008.11.05.02.02.04;	author -;	state -;
branches;
next	1.7;

1.7
date	2008.11.05.02.01.52;	author -;	state -;
branches;
next	1.6;

1.6
date	2008.11.05.01.57.46;	author -;	state -;
branches;
next	1.5;

1.5
date	2008.11.05.01.55.08;	author -;	state -;
branches;
next	1.4;

1.4
date	2008.11.05.01.50.43;	author -;	state -;
branches;
next	1.3;

1.3
date	2008.11.05.01.49.21;	author -;	state -;
branches;
next	1.2;

1.2
date	2008.11.05.01.48.33;	author -;	state -;
branches;
next	1.1;

1.1
date	2008.11.05.01.43.57;	author -;	state -;
branches;
next	;


desc
@@


1.13
log
@-
@
text
@%{
// $Id$

#include <assert.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <strings.h>

#define YYDEBUG 1
#define YYERROR_VERBOSE 1
#define YYPRINT(file, type, tree) yyprint (file, type, tree)
#define YYSTYPE treeptr

typedef struct tree *treeptr;
struct tree {
   int Vt;
   char lexeme;
   treeptr left;
   treeptr right;
};

YYSTYPE adopt2 (YYSTYPE root, YYSTYPE left, YYSTYPE right) {
   root->left = left;
   root->right = right;
   return root;
}

extern YYSTYPE yylval;
int setyylval (int Vt, char lexeme) {
   yylval = malloc (sizeof (struct tree));
   assert (yylval);
   yylval->lexeme = lexeme;
   yylval->left = yylval->right = NULL;
   return yylval->Vt = Vt;
}

int yylex (void) {
   int comment = 0;
   for (;;) {
      int ch = getchar ();
      if (ch == EOF) return 0;
      if (comment) {comment = ch != '\n'; continue; }
      if (ch == '#') {comment = 1; continue; }
      if (isspace (ch)) continue;
      if (isalpha (ch)) return setyylval (ID, ch);
      if (strchr ("+*()", ch)) return setyylval (ch, ch);
      fprintf (stderr, "Bad character ");
      fprintf (stderr, isgraph (ch) ? "'%c'" : "'\\x%02X'", ch);
      fprintf (stderr, "\n");
   }
}

void yyprint (FILE *file, int type, YYSTYPE tree){
   fprintf (file, "%p->{%d '%c' %p %p}", tree,
            tree->Vt, tree->lexeme, tree->left, tree->right);
}

void preorder (YYSTYPE tree, int depth) {
   if (tree == NULL) return;
   fprintf (stderr, "Semantic trace %*s(", depth * 3, "");
   yyprint (stderr, 0, tree);
   fprintf (stderr, "\n");
   preorder (tree->left, depth + 1);
   preorder (tree->right, depth + 1);
}

YYSTYPE trace (YYSTYPE tree) {
   preorder (tree, 0);
   return tree;
}

void yyerror (char *message) {
   fprintf (stderr, "%s)\n", message);
}

YYSTYPE root = NULL;

%}

%start start
%token ID

%%

start  : expr                {root = $$ = trace ($1); }
       ;

expr   : expr '+' term       {$$ = trace (adopt2 ($2, $1, $3)); }
       | term                {$$ = trace ($1); }
       ;

term   : term '*' factor     {$$ = trace (adopt2 ($2, $1, $3)); }
       | factor              {$$ = trace ($1); }
       ;

factor : '(' expr ')'        {$$ = trace ($2); }
       | ID                  {$$ = trace ($1); }
       ;

%%

int main (int argc, char **argv) {
   int status;
   yydebug = 1;
   status = yyparse ();
   fprintf (stderr, "Root of AST:\n");
   trace (root);
   fprintf (stderr, "Exit status %d\n", status);
   return status;
}

@


1.12
log
@-
@
text
@d2 1
@


1.11
log
@-
@
text
@d47 3
@


1.10
log
@-
@
text
@d73 2
d77 1
a77 1
%start exp
d82 14
a95 11
exp : exp '+' trm      {$$ = trace (adopt2 ($2, $1, $3)); }
    | trm              {$$ = trace ($1); }
    ;

trm : trm '*' fac      {$$ = trace (adopt2 ($2, $1, $3)); }
    | fac              {$$ = trace ($1); }
    ;

fac : '(' exp ')'      {$$ = trace ($2); }
    | ID               {$$ = trace ($1); }
    ;
d103 2
@


1.9
log
@-
@
text
@d57 1
a57 1
   fprintf (stderr, "Action trace %*s(", depth * 3, "");
@


1.8
log
@-
@
text
@d70 1
a70 1
   fprintf (stderr, "%s\n", message);
@


1.7
log
@-
@
text
@d65 1
a65 1
   tracepre (tree, 0);
@


1.6
log
@-
@
text
@d55 3
a57 2
YYSTYPE trace (YYSTYPE tree) {
   fprintf (stderr, "Action trace (");
d60 6
a65 2
   if (tree->left != NULL) trace (tree->left);
   if (tree->right != NULL) trace (tree->right);
@


1.5
log
@-
@
text
@d51 1
a51 1
   fprintf (file, "%d: %p->{%d '%c' %p %p}", type, tree,
d59 2
@


1.4
log
@-
@
text
@d56 1
a56 1
   fprintf (stderr, "$$ = trace (");
@


1.3
log
@-
@
text
@d59 1
@


1.2
log
@-
@
text
@d22 1
a22 1
treeptr adopt2 (treeptr root, treeptr left, treeptr right) {
d55 1
a55 1
void trace (YYSTYPE tree) {
@


1.1
log
@-
@
text
@d11 1
a11 1
#define YYPRINT(file, type, value) yyprint (file, type, value)
d22 1
a22 1
treeptr adopt (treeptr root, treeptr left, treeptr right) {
d50 9
a58 3
void yyprint (FILE *file, int type, YYSTYPE value){
   fprintf (file, "%d: %p->{%d '%c' %p %p}", type, value,
            value->Vt, value->lexeme, value->left, value->right);
d72 2
a73 2
exp : exp '+' trm      {$$ = adopt ($2, $1, $3); }
    | trm              {$$ = $1; }
d76 2
a77 2
trm : trm '*' fac      {$$ = adopt ($2, $1, $3); }
    | fac              {$$ = $1; }
d80 2
a81 2
fac : '(' exp ')'      {$$ = $2; }
    | ID               {$$ = $1; }
@
