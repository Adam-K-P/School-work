head	1.5;
access;
symbols;
locks;
comment	@# @;


1.5
date	2014.11.07.03.04.28;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.10.24.23.58.38;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.10.24.23.56.10;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.10.24.23.43.52;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.09.24.00.15.24;	author -;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@%{
// $Id: etf.yy,v 1.4 2014-10-24 16:58:38-07 - - $

#include <assert.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define YYDEBUG 1
#define YYERROR_VERBOSE 1
#define YYPRINT(FILE,TYPE,TREE) yyprint (FILE, TYPE, TREE)
#define YYSTYPE tree*

struct tree {
   int nodenr;
   int Vt;
   char lexeme;
   tree* left;
   tree* right;
};

void yyprint (FILE* file, int type, tree* tree);
tree* trace (tree* tree);
tree* adopt2 (tree* root, tree* left, tree* right);
int yylex (void);
void yyerror (const char* message);

tree* root = nullptr;

%}

%token-table
%verbose

%token IDENT ADD MUL LPAR RPAR
%start start

%%

start  : expr                {root = $$ = trace ($1); }
       ;

expr   : expr ADD term       {$$ = trace (adopt2 ($2, $1, $3)); }
       | term                {$$ = trace ($1); }
       ;

term   : term MUL factor     {$$ = trace (adopt2 ($2, $1, $3)); }
       | factor              {$$ = trace ($1); }
       ;

factor : LPAR expr RPAR      {$$ = trace ($2); }
       | IDENT               {$$ = trace ($1); }
       ;

%%


tree* adopt2 (tree* root, tree* left, tree* right) {
   root->left = left;
   root->right = right;
   return root;
}

int setyylval (int Vt, char lexeme) {
   static int static_nodenr = 0;
   yylval = new tree();
   yylval->nodenr = ++static_nodenr;
   yylval->lexeme = lexeme;
   yylval->left = yylval->right = nullptr;
   yylval->Vt = Vt;
   return Vt;
}

void print_char (FILE* file, char ch) {
   fprintf (file, isgraph (ch) ? "'%c'" : "'\\x%02X'", ch);
}

char *input_string = nullptr;
char *nextchar = nullptr;
int yylex (void) {
   for (;;) {
      int ch = *nextchar++;
      if (ch == '\0') return setyylval (0, ch);
      if (isspace (ch)) continue;
      if (isalpha (ch)) return setyylval (IDENT, ch);
      switch (ch) {
         case '+': return setyylval (ADD, ch);
         case '*': return setyylval (MUL, ch);
         case '(': return setyylval (LPAR, ch);
         case ')': return setyylval (RPAR, ch);
      }
      fprintf (stderr, "Bad character ");
      print_char (stderr, ch);
      fprintf (stderr, "\n");
   }
}


void yyprint_child_nr (FILE* file, tree* node) {
   if (node == nullptr) fprintf (file, " nil");
                   else fprintf (file, " node%d", node->nodenr);
}
void yyprint (FILE* file, int type, tree* tree){
   fprintf (file, "node%d: %s ",
            tree->nodenr, yytname[YYTRANSLATE(type)]);
   print_char (file, tree->lexeme);
   yyprint_child_nr (file, tree->left);
   yyprint_child_nr (file, tree->right);
}

void preorder (tree* tree, int depth) {
   if (tree == nullptr) return;
   fprintf (stderr, "AST: %*s", depth * 3, "");
   yyprint (stderr, tree->Vt, tree);
   fprintf (stderr, "\n");
   preorder (tree->left, depth + 1);
   preorder (tree->right, depth + 1);
}

tree* trace (tree* tree) {
   preorder (tree, 0);
   return tree;
}

void yyerror (const char* message) {
   fprintf (stderr, "%s)\n", message);
}

int main (int argc, char** argv) {
   assert (argc == 2);
   nextchar = input_string = argv[1];
   fprintf (stderr, "Scanning input: \"%s\"\n", input_string);
   yydebug = 1;
   int status = yyparse ();
   fprintf (stderr, "Finished parse: status %d\n", status);
   fprintf (stderr, "Scanned input: \"%s\"\n", input_string);
   fprintf (stderr, "Root of AST:\n");
   trace (root);
   return status;
}

@


1.4
log
@-
@
text
@d2 1
a2 1
// $Id: etf.yy,v 1.3 2014-10-24 16:56:10-07 - - $
d16 1
d36 1
a37 1
%token IDENT
d44 1
a44 1
expr   : expr '+' term       {$$ = trace (adopt2 ($2, $1, $3)); }
d48 1
a48 1
term   : term '*' factor     {$$ = trace (adopt2 ($2, $1, $3)); }
d52 1
a52 1
factor : '(' expr ')'        {$$ = trace ($2); }
d66 1
d68 1
d75 6
a81 1
   bool comment = false;
d83 2
a84 4
      int ch = getchar ();
      if (ch == EOF) return 0;
      if (comment) {comment = ch != '\n'; continue; }
      if (ch == '#') {comment = true; continue; }
d88 4
a91 2
         case '+': case '*': case '(': case ')':
            return setyylval (ch, ch);
d94 1
a94 1
      fprintf (stderr, isgraph (ch) ? "'%c'" : "'\\x%02X'", ch);
d99 5
d105 5
a109 3
   fprintf (file, "%p->%d(%s) {%d '%c' %p %p}",
            tree, type, yytname[YYTRANSLATE(type)],
            tree->Vt, tree->lexeme, tree->left, tree->right);
d114 1
a114 1
   fprintf (stderr, "preorder: %*s(", depth * 3, "");
a124 1

d130 4
a133 2
int main() {
   int status;
d135 3
a137 1
   status = yyparse ();
a139 1
   fprintf (stderr, "Exit status %d\n", status);
@


1.3
log
@-
@
text
@d2 1
a2 1
// $Id: etf.yy,v 1.2 2014-10-24 16:43:52-07 - - $
d56 1
d110 1
@


1.2
log
@-
@
text
@d2 1
a2 1
// $Id: etf.yy,v 1.1 2013-09-23 17:15:24-07 - - $
d12 2
a13 2
#define YYPRINT(file, type, tree) yyprint (file, type, tree)
#define YYSTYPE treeptr
a14 1
typedef struct tree *treeptr;
d18 2
a19 2
   treeptr left;
   treeptr right;
d22 3
a24 3
void yyprint (FILE *file, int type, YYSTYPE tree);
YYSTYPE trace (YYSTYPE tree);
YYSTYPE adopt2 (YYSTYPE root, YYSTYPE left, YYSTYPE right);
d26 1
a26 1
void yyerror (const char *message);
d28 1
a28 1
YYSTYPE root = NULL;
d36 1
a36 1
%token ID
d52 1
a52 1
       | ID                  {$$ = trace ($1); }
d57 1
a57 1
YYSTYPE adopt2 (YYSTYPE root, YYSTYPE left, YYSTYPE right) {
d66 3
a68 2
   yylval->left = yylval->right = NULL;
   return yylval->Vt = Vt;
d72 1
a72 1
   int comment = 0;
d77 1
a77 1
      if (ch == '#') {comment = 1; continue; }
d79 5
a83 2
      if (isalpha (ch)) return setyylval (ID, ch);
      if (strchr ("+*()", ch)) return setyylval (ch, ch);
d90 1
a90 1
void yyprint (FILE *file, int type, YYSTYPE tree){
d96 2
a97 2
void preorder (YYSTYPE tree, int depth) {
   if (tree == NULL) return;
d105 1
a105 1
YYSTYPE trace (YYSTYPE tree) {
d110 1
a110 1
void yyerror (const char *message) {
@


1.1
log
@-
@
text
@d2 1
a2 1
// $Id: etf.y,v 1.13 2009-10-21 15:13:06-07 - - $
d8 1
a8 1
#include <strings.h>
d23 6
d33 3
d65 1
a65 2
   yylval = malloc (sizeof (struct tree));
   assert (yylval);
d88 2
a89 1
   fprintf (file, "%p->{%d '%c' %p %p}", tree,
d95 2
a96 2
   fprintf (stderr, "Semantic trace %*s(", depth * 3, "");
   yyprint (stderr, 0, tree);
d107 1
a107 1
void yyerror (char *message) {
d111 1
a111 1
int main (int argc, char **argv) {
@
