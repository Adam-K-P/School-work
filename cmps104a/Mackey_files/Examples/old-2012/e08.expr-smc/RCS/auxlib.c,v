head	1.16;
access;
symbols;
locks;
comment	@ * @;


1.16
date	2013.08.22.20.59.59;	author -;	state -;
branches;
next	1.15;

1.15
date	2013.08.22.20.58.43;	author -;	state -;
branches;
next	1.14;

1.14
date	2012.10.12.01.22.20;	author -;	state -;
branches;
next	1.13;

1.13
date	2012.10.12.01.16.26;	author -;	state -;
branches;
next	1.12;

1.12
date	2012.10.12.01.16.15;	author -;	state -;
branches;
next	1.11;

1.11
date	2012.10.12.01.15.59;	author -;	state -;
branches;
next	1.10;

1.10
date	2011.09.22.01.54.07;	author -;	state -;
branches;
next	1.9;

1.9
date	2011.09.01.00.54.03;	author -;	state -;
branches;
next	1.8;

1.8
date	2010.10.09.01.06.06;	author -;	state -;
branches;
next	1.7;

1.7
date	2010.10.08.21.56.36;	author -;	state -;
branches;
next	1.6;

1.6
date	2010.10.08.21.48.06;	author -;	state -;
branches;
next	1.5;

1.5
date	2010.10.08.20.52.02;	author -;	state -;
branches;
next	1.4;

1.4
date	2010.10.08.20.13.31;	author -;	state -;
branches;
next	1.3;

1.3
date	2010.10.07.23.42.32;	author -;	state -;
branches;
next	1.2;

1.2
date	2010.02.12.23.04.56;	author -;	state -;
branches;
next	1.1;

1.1
date	2009.10.09.01.08.23;	author -;	state -;
branches;
next	;


desc
@@


1.16
log
@-
@
text
@
#define _GNU_SOURCE
#define __USE_GNU

#include <assert.h>
#include <errno.h>
#include <libgen.h>
#include <limits.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <wait.h>

#include "auxlib.h"

static int exitstatus = EXIT_SUCCESS;
static char *execname = NULL;
static char *debugflags = "";
static bool alldebugflags = false;

void set_execname (char *argv0) {
   execname = basename (argv0);
}

char *get_execname (void) {
   assert (execname != NULL);
   return execname;
}

static void eprint_signal (char *kind, int signal) {
   eprintf (", %s %d", kind, signal);
   char *sigstr = strsignal (signal);
   if (sigstr != NULL) fprintf (stderr, " %s", sigstr);
}

void eprint_status (char *command, int status) {
   if (status == 0) return; 
   eprintf ("%s: status 0x%04X", command, status);
   if (WIFEXITED (status)) {
      eprintf (", exit %d", WEXITSTATUS (status));
   }
   if (WIFSIGNALED (status)) {
      eprint_signal ("Terminated", WTERMSIG (status));
      #ifdef WCOREDUMP
      if (WCOREDUMP (status)) eprintf (", core dumped");
      #endif
   }
   if (WIFSTOPPED (status)) {
      eprint_signal ("Stopped", WSTOPSIG (status));
   }
   if (WIFCONTINUED (status)) {
      eprintf (", Continued");
   }
   eprintf ("\n");
}

int get_exitstatus (void) {
   return exitstatus;
}


void veprintf (char *format, va_list args) {
   assert (execname != NULL);
   assert (format != NULL);
   fflush (NULL);
   if (strstr (format, "%:") == format) {
      fprintf (stderr, "%s: ", get_execname ());
      format += 2;
   }
   vfprintf (stderr, format, args);
   fflush (NULL);
}

void eprintf (char *format, ...) {
   va_list args;
   va_start (args, format);
   veprintf (format, args);
   va_end (args);
}

void errprintf (char *format, ...) {
   va_list args;
   va_start (args, format);
   veprintf (format, args);
   va_end (args);
   exitstatus = EXIT_FAILURE;
}

void syserrprintf (char *object) {
   errprintf ("%:%s: %s\n", object, strerror (errno));
}

void set_exitstatus (int newexitstatus) {
   newexitstatus &= 0xFF;
   if (exitstatus < newexitstatus) exitstatus = newexitstatus;
   DEBUGF ('x', "exitstatus = %d\n", exitstatus);
}

void __stubprintf (char *file, int line, const char *func,
                   char *format, ...) {
   va_list args;
   fflush (NULL);
   printf ("%s: %s[%d] %s: ", execname, file, line, func);
   va_start (args, format);
   vprintf (format, args);
   va_end (args);
   fflush (NULL);
}     


void set_debugflags (char *flags) {
   debugflags = flags;
   if (strchr (debugflags, '@@') != NULL) alldebugflags = true;
   DEBUGF ('x', "Debugflags = \"%s\", all = %d\n",
           debugflags, alldebugflags);
}

bool is_debugflag (char flag) {
   return alldebugflags || strchr (debugflags, flag) != NULL;
}

void __debugprintf (char flag, char *file, int line, const char *func,
                    char *format, ...) {
   va_list args;
   if (! is_debugflag (flag)) return;
   fflush (NULL);
   va_start (args, format);
   fprintf (stderr, "DEBUGF(%c): %s[%d] %s():\n",
             flag, file, line, func);
   vfprintf (stderr, format, args);
   va_end (args);
   fflush (NULL);
}

RCSC("$Id: auxlib.c,v 1.15 2013-08-22 13:58:43-07 - - $")

@


1.15
log
@-
@
text
@a43 1
   // LINTED (warning: cast from 32-bit integer to 8-bit integer)
d137 1
a137 1
RCSC("$Id: auxlib.c,v 1.14 2012-10-11 18:22:20-07 - - $")
@


1.14
log
@-
@
text
@d138 1
a138 2
// LINTED(static unused)
RCSC(AUXLIB_C,"$Id: auxlib.c,v 1.13 2012-10-11 18:16:26-07 - - $")
@


1.13
log
@-
@
text
@a31 31
void veprintf (char *format, va_list args) {
   assert (execname != NULL);
   assert (format != NULL);
   fflush (NULL);
   if (strstr (format, "%:") == format) {
      fprintf (stderr, "%s: ", get_execname ());
      format += 2;
   }
   vfprintf (stderr, format, args);
   fflush (NULL);
}

void eprintf (char *format, ...) {
   va_list args;
   va_start (args, format);
   veprintf (format, args);
   va_end (args);
}

void errprintf (char *format, ...) {
   va_list args;
   va_start (args, format);
   veprintf (format, args);
   va_end (args);
   exitstatus = EXIT_FAILURE;
}

void syserrprintf (char *object) {
   errprintf ("%:%s: %s\n", object, strerror (errno));
}

d64 32
d113 1
d139 1
a139 1
RCSC(AUXLIB_C,"$Id: auxlib.c,v 1.12 2012-10-11 18:16:15-07 - - $")
@


1.12
log
@-
@
text
@d21 1
a21 1
static bool alldebugflags = FALSE;
d137 1
a137 1
RCSC(AUXLIB_C,"$Id: auxlib.c,v 1.11 2012-10-11 18:15:59-07 - - $")
@


1.11
log
@-
@
text
@d10 1
d137 1
a137 1
RCSC(AUXLIB_C,"$Id: auxlib.c,v 1.10 2011-09-21 18:54:07-07 - - $")
@


1.10
log
@-
@
text
@d113 1
a113 1
   if (strchr (debugflags, '@@') != NULL) alldebugflags = TRUE;
d136 1
a136 1
RCSC(AUXLIB_C,"$Id: auxlib.c,v 1.9 2011-08-31 17:54:03-07 - - $")
@


1.9
log
@-
@
text
@d3 2
d136 1
a136 1
RCSC(AUXLIB_C,"$Id: auxlib.c,v 1.8 2010-10-08 18:06:06-07 - - $")
@


1.8
log
@-
@
text
@d2 1
d11 1
d32 1
a32 1
   xfflush (NULL);
d34 1
a34 1
      xfprintf (stderr, "%s: ", get_execname ());
d36 3
a38 3
   };
   xvfprintf (stderr, format, args);
   xfflush (NULL);
d60 28
d101 2
a102 2
   xfflush (NULL);
   xprintf ("%s: %s[%d] %s: ", execname, file, line, func);
d104 1
a104 1
   xvprintf (format, args);
d106 1
a106 1
   xfflush (NULL);
d124 1
a124 1
   xfflush (NULL);
d126 1
a126 1
   xfprintf (stderr, "DEBUGF(%c): %s[%d] %s():\n",
d128 1
a128 1
   xvfprintf (stderr, format, args);
d130 1
a130 1
   xfflush (NULL);
d134 1
a134 1
RCSC(AUXLIB_C,"$Id: auxlib.c,v 1.7 2010-10-08 14:56:36-07 - - $")
@


1.7
log
@-
@
text
@d27 2
a28 1
static char *init_dprintf (char *format) {
d35 2
a36 1
   return format;
d39 1
a39 1
void dprintf (char *format, ...) {
a40 1
   format = init_dprintf (format);
d42 1
a42 1
   xvfprintf (stderr, format, args);
a43 1
   xfflush (NULL);
d46 1
a46 1
void eprintf (char *format, ...) {
a47 3
   assert (execname != NULL);
   assert (format != NULL);
   format = init_dprintf (format);
d49 1
a49 1
   xvfprintf (stderr, format, args);
a50 1
   xfflush (NULL);
d54 2
a55 2
void syseprintf (char *object) {
   eprintf ("%:%s: %s\n", object, strerror (errno));
d104 1
a104 1
RCSC(AUXLIB_C,"$Id: auxlib.c,v 1.6 2010-10-08 14:48:06-07 - - $")
@


1.6
log
@-
@
text
@d90 4
d97 8
a104 9
   if (alldebugflags || strchr (debugflags, flag) != NULL) {
      xfflush (NULL);
      va_start (args, format);
      xfprintf (stderr, "DEBUGF(%c): %s[%d] %s():\n",
                flag, file, line, func);
      xvfprintf (stderr, format, args);
      va_end (args);
      xfflush (NULL);
   }
d108 1
a108 1
RCSC(AUXLIB_C,"$Id: auxlib.c,v 1.5 2010-10-08 13:52:02-07 - - $")
@


1.5
log
@-
@
text
@d90 1
a90 1
void __debugprintf (char flag, char *file, int line,
d96 2
a97 2
      xfprintf (stderr, "DEBUGF(%c): %s[%d]:\n",
                flag, file, line);
d105 1
a105 1
RCSC(AUXLIB_C,"$Id: auxlib.c,v 1.4 2010-10-08 13:13:31-07 - - $")
@


1.4
log
@-
@
text
@d69 1
a69 1
   DEBUGF ('a', "exitstatus = %d\n", exitstatus);
d86 2
a87 1
   DEBUGF ('a', "Debugflags = \"%s\"\n", debugflags);
d105 1
a105 1
RCSC(AUXLIB_C,"$Id: auxlib.c,v 1.3 2010-10-07 16:42:32-07 - - $")
@


1.3
log
@-
@
text
@d89 2
a90 1
void __debugprintf (char flag, char *file, int line, char *format, ...) {
d104 1
a104 1
RCSC(AUXLIB_C,"$Id: auxlib.c,v 1.2 2010-02-12 15:04:56-08 - - $")
@


1.2
log
@-
@
text
@d13 12
a24 18
static char *progname = NULL;
static int exitcode = EXIT_SUCCESS;
static char debugflags[ UCHAR_MAX + 1 ];

void set_progname (char *arg0) {
   progname = basename (arg0);
   //
   // char *slash = NULL;
   // assert (arg0 != NULL);
   // slash = strrchr (arg0, '/');
   // if (slash == NULL) progname = arg0;
   //               else progname = slash + 1;
   //
}

char *get_progname (void) {
   assert (progname != NULL);
   return progname;
d31 1
a31 1
      xfprintf (stderr, "%s: ", get_progname ());
d48 2
d55 1
a55 1
   exitcode = EXIT_FAILURE;
d62 2
a63 2
int get_exitcode (void) {
   return exitcode;
d66 4
a69 11
void set_debugflags (char *flags) {
   char flagset = TRUE;
   for (; *flags; ++flags) {
      if (*flags == '+') {
         xmemset (debugflags, 1, sizeof debugflags);
      }else if (*flags == '-') {
         flagset = FALSE;
      }else{
         debugflags[ (unsigned char) *flags ] = flagset;
      };
   };
d72 2
a73 2
void __debugprintf (char flag, char *file, int line,
                    char *format, ...) {
d75 2
a76 3
   if (! debugflags[ (unsigned char) flag ]) return;
   format = init_dprintf (format);
   xfprintf (stderr, "%s:%d: ", file, line);
d78 1
a78 1
   xvfprintf (stderr, format, args);
d81 19
d103 1
a103 1
RCSC(AUXLIB_C,"$Id: auxlib.c,v 1.1 2009-10-08 18:08:23-07 - - $")
@


1.1
log
@-
@
text
@d9 1
a9 1
#include <strings.h>
d54 1
d56 1
a56 1
   dprintf (format, args);
d58 1
d96 1
a96 1
RCSC(AUXLIB_C,"$Id: auxlib.c,v 1.1 2009-10-08 17:24:38-07 - - $")
@
