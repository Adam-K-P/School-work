.so Tmac.mm-etc
.INITR* \n[.F]
.GETST* SCORE-TOTAL-END SCORE-TOTAL-END
.TITLE CMPS-104A "Compiler Design I" Spring\~2015 Test\~#2
.RCS \
"$Id: cmps104a-2015q2-exam2.mm,v 1.77 2015-05-20 12:03:37-07 - - $"
.DS
.PS
examboxes(3)
.PE
.DE
.P
.ft BI
No books\(;;
No calculator\(;;
No computer\(;;
No email\(;;
No internet\(;;
No notes\(;;
No phone.
Neatness counts\(!!
Do your scratch work elsewhere and enter only your final
answer into the spaces provided.
.ft R
.EQ
delim $$
.EN
.highacc@over-def +> \[cq]
.highacc@over-def +' \[aa]
.ds-nt automata automata \
\[*a]\[*u]\*[+>]\[*t]\[*o]\*[+']\[*m]\[*a]\[*t]\[*a]
.ds-nt automaton automaton \
\[*a]\[*u]\*[+>]\[*t]\[*o]\*[+']\[*m]\[*a]\[*t]\[*o]\[*n]
.ALX 1 . 3
.LI
Given the grammar presented here,
and using the style from the LALR(1) handout\(::
.ALX a () 4 0 
.LI
Construct the characteristic finite state machine (CFSM), 
sets of items and transition diagram, showing shifts, reductions,
and acceptance.
.SCORE-HERE 6
.LI
Construct the FOLLOW sets.
Show the first pass with rule symbols in the Follow sets.
Then show the revised follow sets with only terminal symbols.
(See chart at the bottom of the page.)
.SCORE-HERE 3
.LI
Answer
.E= yes 
or
.E= no
to each of the following questions\(::
.SCORE-HERE 1
.P
Is the grammar LR(0)\(??
\l'1i'
\h'.25i'
Is the grammar SLR(1)\(??
\l'1i'
.LE
.DS
.TS
tab(|); |r2 l1fB l1fB lfB |.
_
0.|S|\[->]|\[Do] C \[Do] 
1.|C|\[->]|f ( A )
2.|C|\[->]|f ( )
3.|C|\[->]|x
4.|A|\[->]|A , C
5.|A|\[->]|C
_
.TE
.DE
.sp 265p
.DS
.TS
l, |lw(140p) |.
Follow sets with rule symbols:
_
.sp 2p
Follow(C)\(::
.sp 2p
_
.sp 2p
Follow(A)\(::
.sp 2p
_
.TE
.TS
l, |lw(140p) |.
Follow sets with only $V sub T$ symbols\(::
_
.sp 2p
Follow(C)\(::
.sp 2p
_
.sp 2p
Follow(A)\(::
.sp 2p
_
.TE
.DE
.SP 10i 
.LI
Write a 
.V= bison
grammar for the language described here,
which is a small subset of
.V= oc .
Assume the functions
.V= adopt1
and
.V= adopt2
from the project,
and build the abstract syntax tree according to the project specs.
Once the AST has been constructed,
store the root in an external variable called
.V= astroot .
Your grammar must be unambiguous.
.SCORE-HERE 5
.ALX a () 4 0
.LI
The start symbol is an
.V= expr .
.LI
An
.V= expr
is one or more terms connected by
.V= '+'
operators.
The
.V= '+'
operator is left associative.
.LI
A
.V= term
is either an
.V= ATOM
or an
.V= ATOM
followed by an
.V= arglist 
inside parentheses.
.LI
An
.V= arglist
is a sequence of zero or more 
.V= expr s.
.LI
If an
.V= arglist
has two or more
.V= expr s,
each
.V= expr
is separated from the next with a comma.
.LE
.SP 3i
.LI
Write a 
.V= flex
grammar for the language described above.
.SCORE-HERE 3
.ALX a () 4 0
.LI
Call the function
.V= yylval_token
as per the project whenever a token is recognized.
.LI
Comments consist of the Java-style
.V= // -comments.
.LI
White space consists of spaces, tabs, and newlines.
.LI
An
.V= ATOM
is a sequence of one or more digits,
underscores, and upper- or lower- case letters
in any order.
.LI
For any invalid character found, call the function
.V= lexerror
with that character as its argument.
.LE
.SP 2i
.LI
Draw the abstract syntax tree according to the project specifications
for the following program.
.SCORE-HERE 2
.DS
.ft CB
int n = 100;
int s = 0;
while (n > 0) {
   s = s + n;
   n = n - 1;
}
.DE
.LE
.SP 10i
.if t .2C
.\".nr Ds 0
Multiple choice.
To the
.E= left
of each question,
write the letter that indicates your answer.
Write
.E= Z
if you don't want to risk a wrong answer.
Wrong answers are worth negative points.
.nr MULTCHOICE_MAX 12
.SCORE-HERE \n[MULTCHOICE_MAX]
.P
.DS
.TS
tab(|); |l |r2w(.4i) |l1 r1 l |rw(.2i) l |.
_
number of||×|1|\&=||$= a$
correct answers
_
number of||×|\[12]|\&=||$= b$
wrong answers
_
number of|\0\0\0|×|0|\&=|0
missing answers
_
column total|\n[MULTCHOICE_MAX]|||||$= c$
$ c = max ( a - b , 0 ) $
_
.TE
.DE
.ALX 1 . 4
.CHOOSE-BEGIN
A parser, such as is generated by 
.V= bison ,
is a\(::
.CHOOSE4 finite\~state\~automaton pushdown\~automaton \
linear\~bounded\~Turing\~machine universal\~Turing\~machine
.CHOOSE-END
.CHOOSE-BEGIN
.hw oc-cur-ren-ces
Which of the following grammars will recognize an $x$ followed by
zero or more occurrences of $y$\(??
.CHOOSE
$ A -> A ~ x $ \h'.25i' $ A -> y $
.CHOOSE
$ A -> A ~ y $ \h'.25i' $ A -> x $
.CHOOSE
$ A -> x ~ A $ \h'.25i' $ A -> y $
.CHOOSE
$ A -> y ~ A $ \h'.25i' $ A -> x $
.CHOOSE-END
.CHOOSE-BEGIN
Which of the following might be a function prolog\(??
.CHOOSE4V "push fp; fp = sp; sp -= N;" "push sp; sp = fp; fp -= N;" \
"sp -= N; push fp, sp = fp;" "sp = fp; push sp; sp -= N;"
.CHOOSE-END
.CHOOSE-BEGIN
Which of the following might occur in a function epilog\(??
.CHOOSE4V "fp = sp; pop sp; return;" "pop fp; sp = fp; return;" \
"pop sp; fp = sp; return;" "sp = fp; pop fp; return;"
.CHOOSE-END
.CHOOSE-BEGIN
Assuming 64-bit pointers, and memory management using the boundary tag
method, what is the closest distance between addresses
that might be returned from successive calls to
.V= malloc (3)\(??
.CHOOSE4 0x08 0x10 0x20 0x40
.CHOOSE-END
.CHOOSE-BEGIN
Which of the following items in a state will cause a shift\(??
.CHOOSE 
$ E ~ -> ~ \[bu] ~ E + T $ 
.CHOOSE 
$ E ~ -> ~ E ~ \[bu] ~ + T $ 
.CHOOSE 
$ E ~ -> ~ E + ~ \[bu] ~ T $
.CHOOSE 
$ E ~ -> ~ E + T ~ \[bu] $ 
.CHOOSE-END
.CHOOSE-BEGIN
Which of the following items in a state was added during the closure
computation\(??
.CHOOSE 
$ E ~ -> ~ \[bu] ~ E + T $ 
.CHOOSE 
$ E ~ -> ~ E ~ \[bu] ~ + T $ 
.CHOOSE 
$ E ~ -> ~ E + ~ \[bu] ~ T $
.CHOOSE 
$ E ~ -> ~ E + T ~ \[bu] $ 
.CHOOSE-END
.CHOOSE-BEGIN
Which of the following is only needed if a language permits
functions to be nested\(??
.CHOOSE4 dynamic\~link frame\~pointer return\~address static\~link
.CHOOSE-END
.CHOOSE-BEGIN
Recognizing reserved words by coding them as regular expressions
in the scanner will make the generated DFA\(::
.CHOOSE4 "run more quickly." "run more slowly." "use less memory." \
"use more memory."
.CHOOSE-END
.CHOOSE-BEGIN
Which statement will round
.V= n
up to the next higher multiple of 16 if it is not a multiple of 16
and leave it unchanged if it is a multiple of 16\(??
.CHOOSE4V "n = (n + 15) & ! 15;" "n = (n + 15) & \[ti] 15;" \
"n = n + (15 & \[ti] 15);" "n = n >> 4 << 4;"
.CHOOSE-END
.CHOOSE-BEGIN
What class of languages is equivalent to the
universal Turing machine\(??
.CHOOSE4 regular\~languages context\~free\~languages \
context\~sensitive\~languages unrestricted\~languages
.CHOOSE-END
.CHOOSE-BEGIN
Who invented the Turing machine in 1936?
.CHOOSE4 Alan\~Turing Alonzo\~Turing Charles\~Turing Noam\~Turing
.CHOOSE-END
.LE
.br
.nr pic_ll \n[.l]u+40p
.ll \n[pic_ll]u
.if dPSPIC \{
.   sp -24p
.   PSPIC -R jpgs/bug-zero.ps 2.125i
.\}
.br 
.S -2 -4
.BR "The First ``Computer Bug''." 
Moth found trapped between points at Relay #70, Panel F,
of the Mark II Aiken Relay Calculator while it was being tested at
Harvard University,
9 September 1947.
The operators affixed the moth to the computer log,
with the entry: ``First actual case of bug being found.''
They put out the word that they had ``debugged'' the machine,
thus introducing the term ``debugging a computer program''.
In 1988,
the log,
with the moth still taped by the entry,
was in the Naval Surface Warfare Center Computer Museum at Dahlgren,
Virginia.
.=V [ http://en.wikipedia.org/wiki/File:H96566k.jpg ]
.br 
.S +2 +4
.FINISH
