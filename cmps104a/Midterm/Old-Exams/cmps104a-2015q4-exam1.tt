CMPS-104A · Compiler Design I · Fall 2015 · Test #1             1 of 1
$Id: cmps104a-2015q4-exam1.mm,v 1.52 2015-10-20 15:03:03-07 - - $

.PS
examboxes(3)
.PE

No books;  No calculator;  No computer;  No email;  No internet;  No
notes;  No phone.  Neatness counts!  Do your scratch work elsewhere
and enter only your final answer into the spaces provided.

.EQ
delim $$
.EN

 1. Draw abstract syntax trees for each of the following C
    expressions:  [3pt]

    +--------------------+---------------------+---------------------+
    | a * b / c * d - e  |    a = b * c + d    |  a + b / c + d * e  |
    +--------------------+---------------------+---------------------+
    |                    |                     |                     |
    |                    |                     |                     |
    |                    |                     |                     |
    |                    |                     |                     |
    |                    |                     |                     |
    |                    |                     |                     |
    |                    |                     |                     |
    |                    |                     |                     |
    |                    |                     |                     |
    +--------------------+---------------------+---------------------+

 2. Write flex regular expressions for each of the following:  [5pt]

     (a) A number which consists of a sequence of decimal digits,
         possibly with a decimal point.  If a decimal point appears,
         it must be preceded and followed by digits.  A number has an
         optional exponent, which is the letter ``e'' in upper- or
         lower-case, followed by an optional minus sign, and then one
         or more digits.

     (b) A quoted string which starts and ends with a double quote.
         Between the quotes may be zero or more occurrences of any
         character except a newline.  If a backslash or a quote
         appears in the string, it must be excaped by a backslash.

     (c) Write two patterns in the correct order.  One is the keyword
         if, which may not be recognized as an identifier.  The other
         is an identifier which consists of one or more upper- or
         lower-case letters or decimal digits, but which may not begin
         with a digit.

     (d) Write two patterns:  one matches a correct octal constant in
         C, and the other matches a correct hexadecimal constant in C.

     (e) A pattern which recognizes a list-extracting function in
         Scheme.  The first letter is always a lower-case ``c'' and
         the last letter is always a lower-case ``r''.  Between them
         are one or more occurrences of either the lower-case letters
         ``a'' or ``d''.  Examples:  car, cdr, caar, cadr, cdar, cddr,
         etc.

 3. Using Thompson's construction, draw the NFA from the following
    regular expression.  [2pt]

    ab*|cd

 4. Given the NFA shown here, compute the $\epsilon$-closure of each
    state and fill in the table.  [2pt]

                                                                          +-----------+--------------------------+
                                                                          | state $s$ | $\epsilon$-closure($s$)  |
    .PS 3i                                                                +-----------+--------------------------+
    arrowwid = 0.1                                                        |     1     |                          |
    arrowht = 0.2                                                         +-----------+--------------------------+
    S0: circle invis; move right movewid                                  |     2     |                          |
    S1: circle "1"; move right 2*movewid                                  +-----------+--------------------------+
    S3: circle "3"; move right 2*movewid                                  |     3     |                          |
    S6: circle "6"; move right 2*movewid                                  +-----------+--------------------------+
    S8: circle "8"; circle rad circlerad-.075 at S8; move right 2*movewid |     4     |                          |
    circle invis                                                          +-----------+--------------------------+
    move up 2*moveht from S3; S2: circle "2"                              |     5     |                          |
    move up 2*moveht from S6; S5: circle "5"                              +-----------+--------------------------+
    move down 2*moveht from S3; S4: circle "4"                            |     6     |                          |
    move down 2*moveht from S6; S7: circle "7"                            +-----------+--------------------------+
    arrow from S0 to S1 chop                                              |     7     |                          |
    arrow "\[*e]" above from S1 to S2 chop                                +-----------+--------------------------+
    arrow "\[*e]" above from S1 to S3 chop                                |     8     |                          |
    arrow "\[*e]" above from S1 to S4 chop                                +-----------+--------------------------+
    arrow "a" below from S2 to S5 chop                                    |           |                          |
    arrow "b" above from S3 to S6 chop                                    |           |                          |
    arrow "c" above from S4 to S7 chop                                    |           |                          |
    arrow "\[*e]" above from S5 to S8 chop                                |           |                          |
    arrow "\[*e]" above from S6 to S8 chop                                |           |                          |
    arrow "x" above from S7 to S8 chop                                    |           |                          |
    arrow "b" above from S3 to S7 chop                                    |           |                          |
    SX: circle invis at 1/2 between S2 and S5                             |           |                          |
    spline from S5.nw then to SX.n+(0,moveht/2) then to S2.ne ->          |           |                          |
    "\[*e]" at SX+(0,moveht)                                              |           |                          |
    .PE                                                                   |           |                          |
                                                                          |           |                          |

 5. Given the ETF grammar shown at the left, draw parse trees for each
    of the following expressions:  [3pt]

                                                                        +-----------------------+-----------------------+-----------------------+
                                                                        |                       |                       |                       |
                                                                        |                       |                       |                       |
                                                                        |                       |                       |                       |
    .EQ                                                                 |                       |                       |                       |
    lpile { E above E above T above T above F above F }                 |                       |                       |                       |
    lpile { ~ -> ~ above ~ -> ~ above ~ -> ~                            |                       |                       |                       |
    above ~ -> ~ above ~ -> ~ above ~ -> ~ }                            |                       |                       |                       |
    lpile { E + T above T above T * F above F above ( ~ E ~ ) above i } |                       |                       |                       |
    .EN                                                                 |                       |                       |                       |
                                                                        |                       |                       |                       |
                                                                        |                       |                       |                       |
                                                                        |     a  *  b  +  c     |   (  a  +  b  )  *  c |      a  *  b  *  c    |
                                                                        +-----------------------+-----------------------+-----------------------+

 6. Given the ETF grammar in the previous question and the fact that a
    grammar $G = < V sub N , V sub T , P , S > $, fill in each of the
    following:  [1pt]

    .EQ
    V sub N = left { "\l'1i'" right } ~ ,
    V sub T = left { "\l'1i'" right } ~ ,
    roman and ~ ~ S = "\l'1i'" ~ .
    .EN

 7. Rewrite the ETF grammar from the previous question so that both
    the + and * operators are right associative, and have the same
    precedence.  [2pt]

 8. Draw deterministic finite automata for each of the following
    regular expressions.  Use the minimum possible number of states.
    [2pt]

     (a) ab*c|d

     (b) a+b+c+

Multiple choice.  To the left of each question, write the letter that
indicates your answer.  Write Z if you don't want to risk a wrong
answer.  Wrong answers are worth negative points.  [12pt]

+--------------------------+------+------+------------+
|number of                 |      |× 1 = |      $= a$ |
|correct answers           |      |      |            |
+--------------------------+------+------+------------+
|number of                 |      |× ½ = |      $= b$ |
|wrong answers             |      |      |            |
+--------------------------+------+------+------------+
|number of                 |      |× 0 = |  0         |
|missing answers           |      |      |            |
+--------------------------+------+------+------------+
|column total              |   12 |      |      $= c$ |
|$ c = max ( a - b , 0 ) $ |      |      |            |
+--------------------------+------+------+------------+

 1. The function yyparse implements what kind of machine?
    (A) Turing machine
    (B) finite state automaton
    (C) linear bounded automaton
    (D) pushdown automaton

 2. The function yylex implements what kind of machine?
    (A) Turing machine
    (B) finite state automaton
    (C) linear bounded automaton
    (D) pushdown automaton

 3. What kind of language is recognized by flex?
    (A) context-free
    (B) context-sensitive
    (C) recursively enumerable
    (D) regular

 4. What kind of language is recognized by bison?
    (A) context-free
    (B) context-sensitive
    (C) recursively enumerable
    (D) regular

 5. The regex ab|c*d is equivalent to:
    (A) (a(b|c))*d
    (B) (ab)|((c*)d)
    (C) a((b|c)*)d
    (D) a(b|(c*))d

 6. Whenever yylex returns, what variable points at the lexeme most
    recently matched?
    (A) yydebug
    (B) yyin
    (C) yylexeme
    (D) yytext

 7. Given the ETF grammar discussed in class, which rule unambiguously
    shows that the operator + is left associative and can appear
    multiple times in an expression?
    (A) $ E -> E + E $
    (B) $ E -> E + T $
    (C) $ E -> T + E $
    (D) $ E -> T + T $

 8. Access in time $ O ( 1 ) $ to the string table is provided by:
    (A) map<string>
    (B) set<string>
    (C) unordered_map<string>
    (D) unordered_set<string>

 9. A DFA is constructed from a regular expression $r$ and used to
    scan a string $s$.  How fast is the scan?
    (A) $ O ( 1 ) $
    (B) $ O ( 2 sup { left | r right | } ) $
    (C) $ O ( left | r right | times left | s right | ) $
    (D) $ O ( left | s right | ) $

10. If D is the set of languages recognizable by a DFA, and N is the
    set of languages recognizable by an NFA, then:
    (A) $ D == N $
    (B) $ D subset N $
    (C) $ D supset N $
    (D) Not enough information to decide, because it depends on the
        particular grammar in question.

11. Given a grammar $G = < V sub N , V sub T , P , S > $, tokens
    returned by yylex deal strictly with which set?
    (A) $ V sub N $
    (B) $ V sub T $
    (C) $ P $
    (D) $ S $

12. Which pattern will recognize a Java or C++ comment?
    (A) "//"[^/n]*
    (B) "//"[^\n]*
    (C) "\\"[^/n]*
    (D) "\\"[^\n]*

