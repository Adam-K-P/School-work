CMPS-104A · Compiler Design I · Spring 2015 · Test #2           1 of 1
$Id: cmps104a-2015q2-exam2.mm,v 1.76 2015-05-08 17:17:38-07 - - $

.PS
examboxes(3)
.PE

No books;  No calculator;  No computer;  No email;  No internet;  No
notes;  No phone.  Neatness counts!  Do your scratch work elsewhere
and enter only your final answer into the spaces provided.

.EQ
delim $$
.EN

1. Given the grammar presented here, and using the style from the
   LALR(1) handout:
   (a) Construct the characteristic finite state machine (CFSM), sets
       of items and transition diagram, showing shifts, reductions,
       and acceptance.  [6pt]
   (b) Construct the FOLLOW sets.  Show the first pass with rule
       symbols in the Follow sets.  Then show the revised follow sets
       with only terminal symbols.  (See chart at the bottom of the
       page.)  [3pt]
   (c) Answer yes or no to each of the following questions:  [1pt]

       Is the grammar LR(0)?  __________    Is the grammar SLR(1)?
       __________

   +-----------------+
   |0.  S -> $ C $   |
   |1.  C -> f ( A ) |
   |2.  C -> f ( )   |
   |3.  C -> x       |
   |4.  A -> A , C   |
   |5.  A -> C       |
   +-----------------+

    Follow sets with rule symbols:
   +-------------------------------+
   |Follow(C):                     |
   +-------------------------------+
   |Follow(A):                     |
   +-------------------------------+
    Follow sets with only $V sub T$ symbols:
   +-----------------------------------------+
   |Follow(C):                               |
   +-----------------------------------------+
   |Follow(A):                               |
   +-----------------------------------------+

2. Write a bison grammar for the language described here, which is a
   small subset of oc.  Assume the functions adopt1 and adopt2 from
   the project, and build the abstract syntax tree according to the
   project specs.  Once the AST has been constructed, store the root
   in an external variable called astroot.  Your grammar must be
   unambiguous.  [5pt]
   (a) The start symbol is an expr.
   (b) An expr is one or more terms connected by '+' operators.  The
       '+' operator is left associative.
   (c) A term is either an ATOM or an ATOM followed by an arglist
       inside parentheses.
   (d) An arglist is a sequence of zero or more exprs.
   (e) If an arglist has two or more exprs, each expr is separated
       from the next with a comma.

3. Write a flex grammar for the language described above.  [3pt]
   (a) Call the function yylval_token as per the project whenever a
       token is recognized.
   (b) Comments consist of the Java-style //-comments.
   (c) White space consists of spaces, tabs, and newlines.
   (d) An ATOM is a sequence of one or more digits, underscores, and
       upper- or lower- case letters in any order.
   (e) For any invalid character found, call the function lexerror
       with that character as its argument.

4. Draw the abstract syntax tree according to the project
   specifications for the following program.  [2pt]

   int n = 100;
   int s = 0;
   while (n > 0) {
      s = s + n;
      n = n - 1;
   }

Multiple choice.  To the left of each question, write the letter that
indicates your answer.  Write Z if you don't want to risk a wrong
answer.  Wrong answers are worth negative points.  [12pt]

+--------------------------+------+------+------------+
|number of                 |      |× 1 = |      $= a$ |
|correct answers           |      |      |            |
+--------------------------+------+------+------------+
|number of                 |      |× ½ = |      $= b$ |
|wrong answers             |      |      |            |
+--------------------------+------+------+------------+
|number of                 |      |× 0 = |  0         |
|missing answers           |      |      |            |
+--------------------------+------+------+------------+
|column total              |   12 |      |      $= c$ |
|$ c = max ( a - b , 0 ) $ |      |      |            |
+--------------------------+------+------+------------+

 1. A parser, such as is generated by bison, is a:
    (A) finite state automaton
    (B) pushdown automaton
    (C) linear bounded Turing machine
    (D) universal Turing machine

 2. Which of the following grammars will recognize an $x$ followed by
    zero or more occurrences of $y$?
    (A) $ A -> A ~ x $    $ A -> y $
    (B) $ A -> A ~ y $    $ A -> x $
    (C) $ A -> x ~ A $    $ A -> y $
    (D) $ A -> y ~ A $    $ A -> x $

 3. Which of the following might be a function prolog?
    (A) push fp; fp = sp; sp -= N;
    (B) push sp; sp = fp; fp -= N;
    (C) sp -= N; push fp, sp = fp;
    (D) sp = fp; push sp; sp -= N;

 4. Which of the following might occur in a function epilog?
    (A) fp = sp; pop sp; return;
    (B) pop fp; sp = fp; return;
    (C) pop sp; fp = sp; return;
    (D) sp = fp; pop fp; return;

 5. Assuming 64-bit pointers, and memory management using the boundary
    tag method, what is the closest distance between addresses that
    might be returned from successive calls to malloc(3)?
    (A) 0x08
    (B) 0x10
    (C) 0x20
    (D) 0x40

 6. Which of the following items in a state will cause a shift?
    (A) $ E ~ -> ~ · ~ E + T $
    (B) $ E ~ -> ~ E ~ · ~ + T $
    (C) $ E ~ -> ~ E + ~ · ~ T $
    (D) $ E ~ -> ~ E + T ~ · $

 7. Which of the following items in a state was added during the
    closure computation?
    (A) $ E ~ -> ~ · ~ E + T $
    (B) $ E ~ -> ~ E ~ · ~ + T $
    (C) $ E ~ -> ~ E + ~ · ~ T $
    (D) $ E ~ -> ~ E + T ~ · $

 8. Which of the following is only needed if a language permits
    functions to be nested?
    (A) dynamic link
    (B) frame pointer
    (C) return address
    (D) static link

 9. Recognizing reserved words by coding them as regular expressions
    in the scanner will make the generated DFA:
    (A) run more quickly.
    (B) run more slowly.
    (C) use less memory.
    (D) use more memory.

10. Which statement will round n up to the next higher multiple of 16
    if it is not a multiple of 16 and leave it unchanged if it is a
    multiple of 16?
    (A) n = (n + 15) & ! 15;
    (B) n = (n + 15) & ~ 15;
    (C) n = n + (15 & ~ 15);
    (D) n = n >> 4 << 4;

11. What class of languages is equivalent to the universal Turing
    machine?
    (A) regular languages
    (B) context free languages
    (C) context sensitive languages
    (D) unrestricted languages

12. Who invented the Turing machine in 1936?
    (A) Alan Turing
    (B) Alonzo Turing
    (C) Charles Turing
    (D) Noam Turing
The First ``Computer Bug''.  Moth found trapped between points at Relay #70,
Panel F, of the Mark II Aiken Relay Calculator while it was being tested at
Harvard University, 9 September 1947.  The operators affixed the moth to the
computer log, with the entry: ``First actual case of bug being found.''
They put out the word that they had ``debugged'' the machine, thus
introducing the term ``debugging a computer program''.  In 1988, the log,
with the moth still taped by the entry, was in the Naval Surface Warfare
Center Computer Museum at Dahlgren, Virginia.  [http://en.wikipedia.org/
wiki/File:H96566k.jpg]

