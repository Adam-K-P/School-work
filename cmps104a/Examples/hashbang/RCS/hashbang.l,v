head	354.12;
access;
symbols;
locks;
comment	@ * @;


354.12
date	2005.07.01.19.22.13;	author -;	state -;
branches;
next	354.11;

354.11
date	2005.07.01.16.53.07;	author -;	state -;
branches;
next	354.10;

354.10
date	2005.07.01.16.47.07;	author -;	state -;
branches;
next	354.9;

354.9
date	2005.07.01.16.45.47;	author -;	state -;
branches;
next	354.8;

354.8
date	2005.07.01.16.42.58;	author -;	state -;
branches;
next	354.7;

354.7
date	2005.07.01.16.40.52;	author -;	state -;
branches;
next	354.6;

354.6
date	2005.07.01.16.39.40;	author -;	state -;
branches;
next	354.5;

354.5
date	2005.07.01.16.33.45;	author -;	state -;
branches;
next	354.4;

354.4
date	2005.07.01.16.31.12;	author -;	state -;
branches;
next	354.3;

354.3
date	2005.07.01.16.30.49;	author -;	state -;
branches;
next	354.2;

354.2
date	2005.07.01.16.30.23;	author -;	state -;
branches;
next	354.1;

354.1
date	2005.06.30.23.51.13;	author -;	state -;
branches;
next	;


desc
@@


354.12
log
@-
@
text
@%{
const char *rcsid =
"$Id: hashbang.l,v 354.11 2005-07-01 09:53:07-07 - - $";

#include <assert.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>

#define IDENT           0x102
#define NUMBER          0x103
#define BAD_NUMBER      0x104
#define JUNK            0x105

#define eprintf(...) fprintf (stderr, __VA_ARGS__)
#define YY_USER_INIT { BEGIN (HASHBANG); }

%}

%option         8bit
%option         backup
%option         debug
%option         ecs
%option         nodefault
%option         nounput
%option         noyywrap
%option         perf-report
%option         verbose

LETTER          [a-zA-Z]
DIGIT           [0-9]
IDENT           ({LETTER}({LETTER}|{DIGIT})*)
FRACTION        ({DIGIT}+\.{DIGIT}*|\.{DIGIT}+)
EXPONENT        ([Ee][+-]?{DIGIT}+)
BAD_EXPONENT    ([Ee][+-]?)
INTEGER         ({DIGIT}+)
NUMBER          ({FRACTION}{EXPONENT}?|{INTEGER}{EXPONENT})
BAD_NUMBER      ({FRACTION}{BAD_EXPONENT}?|{INTEGER}{BAD_EXPONENT})

%x HASHBANG

%%

<HASHBANG>"#!".* { BEGIN (INITIAL); eprintf ("HASHBANG: %s\n", yytext);}
<HASHBANG>.|\n   { BEGIN (INITIAL); yyless(0); }

[ \t\n]+         { }
"//".*           { eprintf ("Comment: %s\n", yytext); }
{IDENT}          { return IDENT; }
{NUMBER}         { return NUMBER; }
{BAD_NUMBER}     { return BAD_NUMBER; }
{INTEGER}        { return BAD_NUMBER; }
[-+*/]           { return *yytext; }
.                { return JUNK; }

%%

/*
* This program shows how to make flex recognize a shell script that
* begins with a hashbang.  We scan the first line using a special
* mode then switch to INITIAL mode.
*/

int main (int argc, char **argv){
   int argi = 1;
   yy_flex_debug = 1;
   /* All output to stderr, because yy_flex_debug does. */
   if (argc > 1 && argv[1][0] == '-') ++argi;
   if (argi < argc){
      yyin = fopen (argv[argi], "r");
      if (yyin) {
         eprintf ("yyin = %s: OK\n", argv[argi]);
      }else{
         eprintf ("%s: %s\n", argv[argi], strerror(errno));
         exit (EXIT_FAILURE);
      };
   };
   for (argi = 0; argi < argc; ++argi) {
      eprintf ("argv[%d]=\"%s\"\n", argi, argv[argi]);
   };
   eprintf ("%s\n", rcsid);
   for (;;) {
      int token = yylex();
      if (token == 0) break;
      eprintf ("TOKEN %d = \"%s\"\n", token, yytext);
   };
   if (yyin != stdin) fclose (yyin);
   return EXIT_SUCCESS;
}

@


354.11
log
@-
@
text
@d3 1
a3 1
"$Id: hashbang.l,v 354.10 2005-07-01 09:47:07-07 - - $";
d44 11
a54 12
<HASHBANG>"#!".*   { BEGIN (INITIAL); eprintf ("#!: %s\n", yytext); }
<HASHBANG>"#"[^!]  { BEGIN (INITIAL); yyless(0); }
<HASHBANG>[^#]     { BEGIN (INITIAL); yyless(0); }

[ \t\n]+           { }
"//".*             { eprintf ("Comment: %s\n", yytext); }
{IDENT}            { return IDENT; }
{NUMBER}           { return NUMBER; }
{BAD_NUMBER}       { return BAD_NUMBER; }
{INTEGER}          { return BAD_NUMBER; }
[-+*/]             { return *yytext; }
.                  { return JUNK; }
d85 1
a85 1
      eprintf ("%s TOKEN %d = \"%s\"\n", argv[0], token, yytext);
@


354.10
log
@-
@
text
@d3 1
a3 1
"$Id: hashbang.l,v 354.9 2005-07-01 09:45:47-07 - - $";
d44 12
a55 12
<HASHBANG>"#!".*        { BEGIN (INITIAL);
                          eprintf ("HASHBANG: %s\n", yytext); }
<HASHBANG>[^#]          { BEGIN (INITIAL); yyless(0); }

[ \t\n]+                { }
"//".*                  { eprintf ("Comment: %s\n", yytext); }
{IDENT}                 { return IDENT; }
{NUMBER}                { return NUMBER; }
{BAD_NUMBER}            { return BAD_NUMBER; }
{INTEGER}               { return BAD_NUMBER; }
[-+*/]                  { return *yytext; }
.                       { return JUNK; }
d59 6
a78 1
   eprintf ("%s\n", rcsid);
d82 1
@


354.9
log
@-
@
text
@d3 1
a3 1
"$Id: hashbang.l,v 354.8 2005-07-01 09:42:58-07 - - $";
a16 3
/*
<HASHBANG>[^#]          { BEGIN (INITIAL); yyless(0); }
*/
d46 1
a46 1
<HASHBANG>              { BEGIN (INITIAL); }
@


354.8
log
@-
@
text
@d3 1
a3 1
"$Id: hashbang.l,v 354.7 2005-07-01 09:40:52-07 - - $";
d16 4
a19 1
#define YY_USER_INIT { BEGIN (hashbang); }
d43 1
a43 1
%x hashbang
d47 1
a47 1
<hashbang>"#!".*        { BEGIN (INITIAL);
d49 1
a49 1
<hashbang>.|\n          { BEGIN (INITIAL); yyless(0); }
@


354.7
log
@-
@
text
@d3 1
a3 1
"$Id: hashbang.l,v 354.6 2005-07-01 09:39:40-07 - - $";
d60 1
a60 1
   int i;
d63 3
a65 2
   if (argc > 1){
      yyin = fopen (argv[1], "r");
d67 1
a67 1
         eprintf ("yyin = %s: OK\n", argv[1]);
d69 1
a69 1
         eprintf ("%s: %s\n", argv[1], strerror(errno));
d74 2
a75 2
   for (i = 0; i < argc; ++i) {
      eprintf ("argv[%d]=\"%s\"\n", i, argv[i]);
@


354.6
log
@-
@
text
@d3 1
a3 1
"$Id: hashbang.l,v 354.5 2005-07-01 09:33:45-07 - - $";
d10 4
a13 4
#define IDENT		0x102
#define NUMBER		0x103
#define BAD_NUMBER	0x104
#define JUNK		0x105
d20 19
a38 19
%option		8bit
%option		backup
%option		debug
%option		ecs
%option		nodefault
%option		nounput
%option		noyywrap
%option		perf-report
%option		verbose

LETTER		[a-zA-Z]
DIGIT		[0-9]
IDENT		({LETTER}({LETTER}|{DIGIT})*)
FRACTION	({DIGIT}+\.{DIGIT}*|\.{DIGIT}+)
EXPONENT	([Ee][+-]?{DIGIT}+)
BAD_EXPONENT	([Ee][+-]?)
INTEGER		({DIGIT}+)
NUMBER		({FRACTION}{EXPONENT}?|{INTEGER}{EXPONENT})
BAD_NUMBER	({FRACTION}{BAD_EXPONENT}?|{INTEGER}{BAD_EXPONENT})
d44 1
a44 1
<hashbang>"#!".*	{ BEGIN (INITIAL);
d46 1
a46 1
<hashbang>.|\n		{ BEGIN (INITIAL); yyless(0); }
d48 8
a55 7
[ \t\n]+		{ }
"//".*			{ eprintf ("Comment: %s\n", yytext); }
{IDENT}			{ return IDENT; }
{NUMBER}		{ return NUMBER; }
{BAD_NUMBER}		{ return BAD_NUMBER; }
[-+*/]			{ return *yytext; }
.			{ return JUNK; }
@


354.5
log
@-
@
text
@d3 1
a3 1
"$Id: hashbang.l,v 354.4 2005-07-01 09:31:12-07 - - $";
d12 2
a13 1
#define JUNK		0x104
d16 1
a16 1
#define YY_USER_INIT { BEGIN( hashbang ); }
d35 1
d38 1
d44 3
a46 3
<hashbang>"#!".*	{ BEGIN( INITIAL );
                          eprintf( "Hashbang: %s\n", yytext ); }
<hashbang>.|\n		{ BEGIN( INITIAL ); yyless(0); }
d49 1
a49 1
"//".*			{ eprintf( "Comment: %s\n", yytext ); }
d52 1
d58 1
a58 1
int main( int argc, char **argv ){
d63 1
a63 1
      yyin = fopen( argv[1], "r" );
d77 2
a78 2
      if( token == 0 ) break;
      eprintf( "token %d = \"%s\"\n", token, yytext );
d80 1
a80 1
   if (yyin != stdin) fclose( yyin );
@


354.4
log
@-
@
text
@d3 1
a3 1
"$Id: hashbang.l,v 354.3 2005-07-01 09:30:49-07 - - $";
d58 8
a65 6
   if (argc > 1) yyin = fopen( argv[1], "r" );
   if (yyin) {
      eprintf ("yyin = %s: OK\n", argv[1]);
   }else{
      eprintf ("%s: %s\n", argv[1], strerror(errno));
      yyin = stdin;
@


354.3
log
@-
@
text
@d3 1
a3 1
"$Id: hashbang.l,v 354.2 2005-07-01 09:30:23-07 - - $";
d14 1
a53 2
#define eprintf(...) fprintf (stderr, __VA_ARGS__)

@


354.2
log
@-
@
text
@d3 1
a3 1
"$Id: hashbang.l,v 354.1 2005-06-30 16:51:13-07 - - $";
d56 1
d67 2
a68 2
   for (n = 0; n < argc; ++n) {
      eprintf ("argv[%d]=\"%s\"\n", n, argv[n]);
@


354.1
log
@-
@
text
@d3 1
a3 1
"$Id: hashbang.l,v 345.21 2004-07-08 14:21:02-07 - - $";
d41 1
a41 1
                          printf( "Hashbang: %s\n", yytext ); }
d45 1
a45 1
"//".*			{ printf( "Comment: %s\n", yytext ); }
d53 2
d56 12
a67 11
   int n = 1;
   assert( argc > 1 );
   yy_flex_debug = argv[n][0] == '-' && ++n
               && strchr( argv[n], 'L' ) != 0;
   yyin = fopen( argv[n], "r" );
   if( yyin ){ printf( "yyin = %s: OK\n", argv[n] ); }
         else{ printf( "%s: %s\n", argv[n], strerror(errno)); exit(1); }
   yy_flex_debug = argc > n+1 && strchr( argv[n+1], 'L' ) != 0;
   printf( "%s\n", rcsid );
   for( n = 0; n < argc; ++n ){
      printf( "argv[%d]=\"%s\"\n", n, argv[n] );
d69 1
a69 1
   for(;;){
d72 1
a72 1
      printf( "token %d = \"%s\"\n", token, yytext );
d74 1
a74 1
   fclose( yyin );
@
