head	1.4;
access;
symbols;
locks;
comment	@// @;


1.4
date	2013.09.20.21.47.05;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.09.20.21.42.10;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.09.20.21.39.01;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.09.20.21.35.41;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@// $Id: predefmacros.cc,v 1.3 2013-09-20 14:42:10-07 - - $

//
// Print out the valuas of various macros and test whether some
// compiler and operating system flags are present.
//
// References:
// http://sourceforge.net/apps/mediawiki/predef/
// See links to Compilers and Operating Systems
//

#include <string>
#include <vector>
using namespace std;

#include <errno.h>
#include <libgen.h>
#include <stdio.h>
#include <stdlib.h>

char *progname = NULL;
int exit_status = EXIT_SUCCESS;


#ifdef __unix__

const vector<string> uname_opts = {
   "--all",
   "--kernel-name", 
   "--nodename", 
   "--kernel-release", 
   "--kernel-version", 
   "--machine", 
   "--processor", 
   "--hardware-platform", 
   "--operating-system", 
};

void run_program (const char *program) {
   printf ("%s = ", program);
   FILE *command = popen (program, "r");
   if (command == NULL) {
      fprintf (stderr,  "%s: %s: %s\n", progname,
               program, strerror (errno));
      exit_status = EXIT_FAILURE;
   }else {
      char buffer[0x10000];
      for (;;) {
         char *eof = fgets (buffer, sizeof buffer, command);
         if (eof) break;
         printf ("%s", buffer);
      }
      pclose (command);
   }
}

void print_unames () {
   system ("date\n");
   const char *const *end = uname_opts + uname_size;
   for (auto citor = uname_opts.cbegin();
        citor != uname_opts.cend(); ++citor) {
      string uname_buffer = "echo -n uname " + *itor
                          + "' = '; uname " + *itor;
      system (uname_buffer);
   }
}

#else

void print_unames () {
   throw "Praeterea, censeo Microflaccidem esse delendam.";
}

#endif


#define PRINTS(ID) printf (#ID " = \"%s\"\n", ID);
#define PRINTD(ID) printf (#ID " = %d\n", ID);

int main (int argc, char **argv) {
   progname = basename (argv[0]);
   print_unames ();

   PRINTS (__FILE__);
   PRINTD (__LINE__);
   PRINTS (__DATE__);
   PRINTS (__TIME__);
   PRINTD (__STDC__);
   PRINTS (__func__);

   #ifdef __cplusplus
   PRINTD (__cplusplus);
   #endif

   #ifdef __unix__
   PRINTD (__unix__);
   #endif

   #ifdef __linux__
   PRINTD (__linux__);
   #endif

   #ifdef __x86_64__
   PRINTD (__x86_64__);
   #endif

   #ifdef __GNUC__
   PRINTD (__GNUC__);
   PRINTD (__GNUC_MINOR__);
   PRINTD (__GNUC_PATCHLEVEL__);
   #endif

   #ifdef _POSIX_VERSION
   PRINTS (_POSIX_VERSION);
   #endif

   #ifdef _XOPEN_VERSION
   PRINTS (_XOPEN_VERSION);
   #endif

   return exit_status;
}

//TEST// runprogram.perl -x predefmacros.lis ./predefmacros
//TEST// mkpspdf predefmacros.ps predefmacros.cc* predefmacros.lis

@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cc,v 1.2 2013-09-20 14:39:01-07 - - $
d12 4
a19 1
#include <string.h>
d27 1
a27 1
const char *const uname_opts[] = {
a37 1
const unsigned uname_size = sizeof uname_opts / sizeof *uname_opts;
d60 4
a63 6
   for (const char *const *itor = uname_opts; itor < end; ++itor) {
      char uname_buffer[256];
      strcpy (uname_buffer, "echo -n uname ");
      strcat (uname_buffer, *itor);
      strcat (uname_buffer, "' = '; uname ");
      strcat (uname_buffer, *itor);
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cc,v 1.1 2013-09-20 14:35:41-07 - - $
a16 1
#include <string.h>
a85 1
   PRINTS (__func__);
d89 1
a89 1
   PRINTD (__STDC_VERSION__);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cc,v 1.6 2012-10-03 18:23:00-07 - - $
d87 1
d91 1
a91 1
   PRINTS (__func__);
d127 1
a127 1
//TEST// mkpspdf predefmacros.ps predefmacros.cc predefmacros.lis
@
