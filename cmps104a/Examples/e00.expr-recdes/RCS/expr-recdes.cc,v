head	1.29;
access;
symbols;
locks;
comment	@// @;


1.29
date	2014.10.10.01.04.35;	author -;	state -;
branches;
next	1.28;

1.28
date	2014.10.10.01.02.33;	author -;	state -;
branches;
next	1.27;

1.27
date	2014.10.10.01.00.12;	author -;	state -;
branches;
next	1.26;

1.26
date	2014.10.10.00.58.35;	author -;	state -;
branches;
next	1.25;

1.25
date	2013.10.02.02.41.12;	author -;	state -;
branches;
next	1.24;

1.24
date	2013.10.02.02.40.05;	author -;	state -;
branches;
next	1.23;

1.23
date	2013.10.02.02.38.03;	author -;	state -;
branches;
next	1.22;

1.22
date	2013.10.02.02.29.05;	author -;	state -;
branches;
next	1.21;

1.21
date	2013.10.02.02.27.19;	author -;	state -;
branches;
next	1.20;

1.20
date	2013.10.02.02.26.49;	author -;	state -;
branches;
next	1.19;

1.19
date	2013.10.02.02.20.57;	author -;	state -;
branches;
next	1.18;

1.18
date	2013.10.02.02.20.19;	author -;	state -;
branches;
next	1.17;

1.17
date	2013.10.02.02.16.53;	author -;	state -;
branches;
next	1.16;

1.16
date	2013.10.02.02.01.21;	author -;	state -;
branches;
next	1.15;

1.15
date	2013.10.02.01.59.07;	author -;	state -;
branches;
next	1.14;

1.14
date	2013.10.02.01.58.39;	author -;	state -;
branches;
next	1.13;

1.13
date	2013.10.02.01.58.17;	author -;	state -;
branches;
next	1.12;

1.12
date	2013.10.02.01.57.22;	author -;	state -;
branches;
next	1.11;

1.11
date	2013.10.02.01.40.09;	author -;	state -;
branches;
next	1.10;

1.10
date	2013.10.02.01.35.48;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.10.02.01.35.24;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.09.04.02.10.53;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.09.04.02.10.27;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.09.04.02.08.23;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.09.04.02.02.42;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.09.04.02.02.11;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.09.04.02.01.13;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.09.04.02.00.31;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.09.04.01.59.40;	author -;	state -;
branches;
next	;


desc
@@


1.29
log
@-
@
text
@// $Id: expr-recdes.cc,v 1.28 2014-10-09 18:02:33-07 - - $

//
// A trivial hand-coded top-down recursive descent compiler for
// a simple language.  No leak checking.  Just crash on any
// syntax error.
//
// Context-free syntax.
// ->, {, }, |, ... are metasymbols
//
// program -> { expr ; }...
// expr    -> term { { + | - } term }...
// term    -> factor { { * | / } factor }...
// factor  -> ( expr ) | IDENT | NUMBER
//
// Lexical syntax.
// Using flex notation.
//
// IDENT   -> [A-Za-z][A-Za-z0-9]*
// NUMBER  -> [0-9]+
// COMMENT -> #.*
// WHITE   -> [ \n]+
//

#include <string>
#include <unordered_map>
#include <vector>
using namespace std;

#include <assert.h>
#include <ctype.h>
#include <libgen.h>
#include <stdarg.h>
#include <stdio.h> 
#include <stdlib.h>
#include <string.h>

enum { ENDFILE = 256, IDENT = 257, NUMBER = 258, ROOT = 259,
       NOSYMBOL = 260, };

unordered_map<unsigned,string> symbol_names {
   {ENDFILE,  "ENDFILE"},
   {IDENT,    "IDENT"},
   {NUMBER,   "NUMBER"},
   {ROOT,     "ROOT"},
   {NOSYMBOL, "NOSYMBOL"},
};


void print_symbol (unsigned symbol) {
   printf ("%d", symbol);
   const auto& isymbol = symbol_names.find (symbol);
   if (isymbol != symbol_names.cend()) {
      printf ("(%s)", isymbol->second.c_str());
   }else if (isgraph (symbol)) {
      printf ("('%c')", symbol);
   }
}

struct astree {
   unsigned symbol;
   string lexeme;
   vector<astree*> children;
   void adopt (astree* child) { children.push_back (child); }
};

astree* new_astree (int symbol, const string& lexeme) {
   astree* tree = new astree();
   tree->symbol = symbol;
   tree->lexeme = lexeme;
   return tree;
}

void preorder_astree (size_t depth, astree* tree) {
   for (size_t count = 0; count < depth; ++count) printf ("|  ");
   printf ("\"%s\" ", tree->lexeme.c_str());
   print_symbol (tree->symbol);
   printf ("\n");
   for (size_t child = 0; child < tree->children.size(); ++child) {
      preorder_astree (depth + 1, tree->children[child]);
   }
}

void print_astree (const char* func, int line, astree* tree) {
   printf ("%s[%d]:\n", func, line);
   preorder_astree (1, tree);
}
#define PRINT_ASTREE(TREE) print_astree (__func__, __LINE__, TREE)


int peekchar = 0;
astree* lookahead_token = NULL;

int isnt_nl (int achar) { return achar != '\n' && achar != EOF; }

string scan_chars (int (*ischar) (int)) {
   string lexeme;
   do {
      assert (peekchar != EOF);
      lexeme += peekchar;
      peekchar = getchar();
   }while (ischar && ischar (peekchar));
   return lexeme;
}

void scan_new_token (int symbol, int (*ischar) (int)) {
   string lexeme = symbol != ENDFILE ? scan_chars (ischar) : "<<EOF>>";
   lookahead_token = new_astree (symbol, lexeme);
   PRINT_ASTREE (lookahead_token);
}

void scan_lookahead_token (void) {
   for (;;) {
      if (isalpha (peekchar)) {
         scan_new_token (IDENT, isalnum);
         return;
      }else if (isdigit (peekchar)) {
         scan_new_token (NUMBER, isdigit);
         return;
      }else {
         switch (peekchar) {
            case ' ':
            case '\n':
               scan_chars (isspace);
               continue;
            case '#':
               scan_chars (isnt_nl);
               continue;
            case '+':
            case '-':
            case '*':
            case '/':
            case '(':
            case ')':
            case ';':
               scan_new_token (peekchar, NULL);
               return;
            case EOF:
               scan_new_token (ENDFILE, NULL);
               return;
         }
      }
      assert (false);
   }
}


astree* parse_expr (void);

astree* parse_factor (void) {
   astree* tree = NULL;
   switch (lookahead_token->symbol) {
      case '(':
         scan_lookahead_token();
         tree = parse_expr();
         assert (lookahead_token->symbol == ')');
         scan_lookahead_token();
         break;
      case IDENT:
      case NUMBER:
         tree = lookahead_token;
         scan_lookahead_token();
         break;
      default:
         assert (lookahead_token->symbol == NOSYMBOL);
   }
   PRINT_ASTREE (tree);
   return tree;
}

astree* parse_term (void) {
   astree* root = parse_factor();
   for (;;) {
      switch (lookahead_token->symbol) {
         case '*':
         case '/': {
            astree* oper = lookahead_token;
            scan_lookahead_token();
            oper->adopt (root);
            oper->adopt (parse_factor());
            root = oper;
            break;
         }
         default:
            PRINT_ASTREE (root);
            return root;
      }
   }
}


astree* parse_expr (void) {
   astree* root = parse_term();
   for (;;) {
      switch (lookahead_token->symbol) {
         case '+':
         case '-': {
            astree* oper = lookahead_token;
            scan_lookahead_token();
            oper->adopt (root);
            oper->adopt (parse_term());
            root = oper;
            break;
         }
         default:
            PRINT_ASTREE (root);
            return root;
      }
   }
}

void parse_program (void) {
   astree* root = new_astree (ROOT, "<<ROOT>>");
   while (lookahead_token->symbol != ENDFILE) {
      astree* tree = parse_expr();
      printf ("\f\n");
      assert (lookahead_token->symbol == ';');
      scan_lookahead_token();
      root->adopt (tree);
   }
   PRINT_ASTREE (root);
}

int main (void) {
   peekchar = getchar();
   scan_lookahead_token();
   parse_program();
   assert (lookahead_token->symbol == ENDFILE);
   return EXIT_SUCCESS;
}

@


1.28
log
@-
@
text
@d1 1
a1 1
// $Id: expr-recdes.cc,v 1.27 2014-10-09 18:00:12-07 - - $
d49 1
a59 1

@


1.27
log
@-
@
text
@d1 1
a1 1
// $Id: expr-recdes.cc,v 1.26 2014-10-09 17:58:35-07 - - $
d51 1
a51 1
   const string& isymbol = symbol_names.find (symbol);
@


1.26
log
@-
@
text
@d1 1
a1 1
// $Id: expr-recdes.cc,v 1.25 2013-10-01 19:41:12-07 - - $
d51 1
a51 1
   auto isymbol = symbol_names.find (symbol);
d54 3
a56 1
   }else if (isgraph (symbol)) printf ("('%c')", symbol);
@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: expr-recdes.cc,v 1.24 2013-10-01 19:40:05-07 - - $
d9 1
d12 2
a13 2
// expr    -> term { +|- term }...
// term    -> factor { *|/ factor }...
d17 1
d41 1
a41 1
unordered_map<unsigned int,string> symbols {
d49 1
a49 1
void print_symbol (unsigned int symbol) {
d51 2
a52 2
   auto isymbol = symbols.find (symbol);
   if (isymbol != symbols.cend()) {
a57 1
typedef struct astree astree;
d59 1
a59 1
   int symbol;
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: expr-recdes.cc,v 1.23 2013-10-01 19:38:03-07 - - $
d36 2
a37 7
enum {
   ENDFILE = 256,
   IDENT = 257,
   NUMBER = 258,
   ROOT = 259,
   NOSYMBOL = 260,
};
d52 1
a52 3
   }else if (isgraph (symbol)) {
      printf ("('%c')", symbol);
   }
@


1.23
log
@-
@
text
@d1 1
a1 1
// $Id: expr-recdes.cc,v 1.22 2013-10-01 19:29:05-07 - - $
d24 1
d36 1
a36 1
enum symbol_type {
d44 1
a44 1
unordered_map<symbol_type,string> {
d50 1
a50 1
} symbols;
d55 5
a59 2
   if (isymbol != symbols.cend()) printf ("(%s)", isymbol->second);
   else if (isgraph (symbol)) printf ("('%c')", symbol);
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: expr-recdes.cc,v 1.21 2013-10-01 19:27:19-07 - - $
d35 23
d76 3
a78 1
   printf ("\"%s\" %d\n", tree->lexeme.c_str(), tree->symbol);
a90 2
enum {ENDFILE = 256, IDENT = 257, NUMBER = 258, ROOT = 259,
      NOSYMBOL = 260};
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: expr-recdes.cc,v 1.20 2013-10-01 19:26:49-07 - - $
d59 2
a60 2
void print_astree (const char* label, astree* tree) {
   printf ("%s:\n", label);
d63 1
a63 1
#define PRINT_ASTREE(TREE) print_astree (__func__, TREE)
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: expr-recdes.cc,v 1.19 2013-10-01 19:20:57-07 - - $
d51 2
a52 2
void preorder_astree (int depth, astree* tree) {
   for (size_t count = 0; count < depth, ++count) printf ("|  ");
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: expr-recdes.cc,v 1.18 2013-10-01 19:20:19-07 - - $
d52 2
a53 2
   printf ("%*c\"%s\" %d\n", depth * 3, ' ',
            tree->lexeme.c_str(), tree->symbol);
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: expr-recdes.cc,v 1.17 2013-10-01 19:16:53-07 - - $
d193 1
a193 1
      printf ("\f");
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: expr-recdes.cc,v 1.15 2013-10-01 18:59:07-07 - - $
d168 1
a188 1

d193 1
@


1.16
log
@-
@
text
@a195 1
      PRINT_ASTREE (root);
d197 1
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: expr-recdes.cc,v 1.13 2013-10-01 18:58:17-07 - - $
d44 1
a44 1
astree* new_astree (int symbol, string* lexeme_p) {
d47 1
a47 1
   tree->lexeme = *lexeme_p;
d85 1
a85 1
   lookahead_token = new_astree (symbol, &lexeme);
@


1.14
log
@-
@
text
@d190 1
a190 1
   astree* root = new_astree (ROOT, "<<ROOT>>";
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: expr-recdes.cc,v 1.12 2013-10-01 18:57:22-07 - - $
d92 1
a92 1
         scan_new_token (IDENT, peekchar, isalnum);
d95 1
a95 1
         scan_new_token (NUMBER, peekchar, isdigit);
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: expr-recdes.cc,v 1.11 2013-10-01 18:40:09-07 - - $
d73 1
a73 1
string scan_chars (int peekchar, int (*ischar) (int)) {
a79 1
   ungetc (peekchar, stdin);
d83 1
a83 1
void scan_new_token (int symbol, int peekchar, int (*ischar) (int)) {
a89 1
   int peekchar = getc (stdin);
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: expr-recdes.cc,v 1.9 2013-10-01 18:35:24-07 - - $
d24 1
d40 2
a41 2
   astree* left;
   astree* right;
a47 2
   tree->left = NULL;
   tree->right = NULL;
d54 3
a56 2
   if (tree->left) preorder_astree (depth + 1, tree->left);
   if (tree->right) preorder_astree (depth + 1, tree->right);
a64 6
astree* adopt (astree* root, astree* left, astree* right) {
   root->left = left;
   root->right = right;
   return root;
}

d66 2
a67 1
enum {ENDFILE = 256, IDENT = 257, NUMBER = 258, NOSYMBOL = -1};
d73 1
a73 1
string scan_chars (int (*ischar) (int)) {
d80 1
d84 1
a84 1
void scan_new_token (int symbol, int (*ischar) (int)) {
d91 1
d94 1
a94 1
         scan_new_token (IDENT, isalnum);
d97 1
a97 1
         scan_new_token (NUMBER, isdigit);
d158 3
a160 1
            root = adopt (oper, root, parse_factor());
d178 3
a180 1
            root = adopt (oper, root, parse_term());
d192 1
d197 2
a198 2
      PRINT_ASTREE (tree);
      if (lookahead_token->symbol != ENDFILE) printf ("\f\n");
@


1.10
log
@-
@
text
@a95 1
      lexeme_buffer = "";
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: expr-recdes.cc,v 1.8 2013-09-03 19:10:53-07 - - $
d89 1
a89 1
   string lexeme = symbol != ENDFILE ? scan_chars (ischar); : "<<EOF>>";
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: expr-recdes.cc,v 1.7 2013-09-03 19:10:27-07 - - $
d39 2
a40 2
   astree *left;
   astree *right;
d43 2
a44 2
astree *new_astree (int symbol, string *lexeme_p) {
   astree *tree = new astree();
d52 1
a52 1
void preorder_astree (int depth, astree *tree) {
d59 1
a59 1
void print_astree (const char *label, astree *tree) {
d65 1
a65 1
astree *adopt (astree *root, astree *left, astree *right) {
d74 1
a74 2
string lexeme_buffer;
astree *lookahead_token = NULL;
d78 2
a79 1
void scan_chars (int (*ischar) (int)) {
d82 2
a83 2
      lexeme_buffer += peekchar;
      peekchar = getchar ();
d85 1
d89 2
a90 2
   if (symbol != ENDFILE) scan_chars (ischar);
   lookahead_token = new_astree (symbol, &lexeme_buffer);
d131 1
a131 1
astree *parse_expr (void);
d133 2
a134 2
astree *parse_factor (void) {
   astree *tree = NULL;
d137 2
a138 2
         scan_lookahead_token ();
         tree = parse_expr ();
d140 1
a140 1
         scan_lookahead_token ();
d145 1
a145 1
         scan_lookahead_token ();
d154 2
a155 2
astree *parse_term (void) {
   astree *root = parse_factor ();
d160 3
a162 3
            astree *oper = lookahead_token;
            scan_lookahead_token ();
            root = adopt (oper, root, parse_factor ());
d172 2
a173 2
astree *parse_expr (void) {
   astree *root = parse_term ();
d178 3
a180 3
            astree *oper = lookahead_token;
            scan_lookahead_token ();
            root = adopt (oper, root, parse_term ());
d193 1
a193 1
      astree *tree = parse_expr ();
d195 1
a195 1
      scan_lookahead_token ();
d202 3
a204 3
   peekchar = getchar ();
   scan_lookahead_token ();
   parse_program ();
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: expr-recdes.cc,v 1.6 2013-09-03 19:08:23-07 - - $
a33 2
char *exec_name = NULL;

d200 1
a200 2
int main (int argc, char **argv) {
   exec_name = basename (argv[0]);
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: expr-recdes.cc,v 1.5 2013-09-03 19:02:42-07 - - $
a35 12
void verify (int condition, const char *format, ...) {
   if (condition) return;
   va_list args;
   fflush (NULL);
   fprintf (stderr, "%s: ", exec_name);
   va_start (args, format);
   vfprintf (stderr, format, args);
   va_end (args);
   fflush (NULL);
   exit (EXIT_FAILURE);
}

d83 1
a83 1
      verify (peekchar != EOF, "read past EOF\n");
d127 1
a127 1
      verify (0, "bad input char \'%c\'\n", peekchar);
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: expr-recdes.cc,v 1.4 2013-09-03 19:02:11-07 - - $
d5 2
a6 1
// a simple language.
a46 3
#define VERIFY_SYNTAX(SYMBOL) \
        verify (lookahead_token->symbol == SYMBOL, \
                "syntax error: %s\n", __func__);
a84 7
void free_astree (astree *tree) {
   if (tree == NULL) return;
   free (tree->left);
   free (tree->right);
   delete tree;
}

d152 1
a152 1
         VERIFY_SYNTAX (')');
d161 1
a161 1
         VERIFY_SYNTAX (NOSYMBOL);
d207 1
a207 1
      VERIFY_SYNTAX (';');
a210 1
      free_astree (tree);
d219 1
a219 1
   VERIFY_SYNTAX (ENDFILE);
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: expr-recdes.cc,v 1.1 2013-09-03 18:59:40-07 - - $
d182 1
a182 1
            astree *operator = lookahead_token;
d184 1
a184 1
            root = adopt (operator, root, parse_factor ());
d200 1
a200 1
            astree *operator = lookahead_token;
d202 1
a202 1
            root = adopt (operator, root, parse_term ());
@


1.3
log
@-
@
text
@d35 1
a35 1
void verify (int condition, char *format, ...) {
@


1.2
log
@-
@
text
@d70 1
a70 1
            tree->lexeme, tree->symbol);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: expr-recdes.c,v 1.104 2013-09-03 18:53:55-07 - - $
d59 1
a59 1
astree *new_astree (int symbol, string *lexeme) {
d62 1
a62 1
   tree->lexeme = lexeme;
@
