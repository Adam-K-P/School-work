head	1.12;
access;
symbols;
locks;
comment	@ * @;


1.12
date	2013.08.22.20.58.43;	author -;	state -;
branches;
next	1.11;

1.11
date	2012.10.12.01.22.20;	author -;	state -;
branches;
next	1.10;

1.10
date	2012.10.12.01.14.48;	author -;	state -;
branches;
next	1.9;

1.9
date	2012.10.12.01.14.30;	author -;	state -;
branches;
next	1.8;

1.8
date	2011.10.28.22.04.05;	author -;	state -;
branches;
next	1.7;

1.7
date	2011.09.22.01.54.07;	author -;	state -;
branches;
next	1.6;

1.6
date	2011.09.22.01.28.53;	author -;	state -;
branches;
next	1.5;

1.5
date	2011.09.01.01.10.49;	author -;	state -;
branches;
next	1.4;

1.4
date	2011.09.01.00.54.03;	author -;	state -;
branches;
next	1.3;

1.3
date	2010.10.09.01.06.06;	author -;	state -;
branches;
next	1.2;

1.2
date	2010.10.01.22.13.41;	author -;	state -;
branches;
next	1.1;

1.1
date	2009.10.09.01.08.23;	author -;	state -;
branches;
next	;


desc
@@


1.12
log
@-
@
text
@
#include <assert.h>
#include <ctype.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "astree.rep.h"
#include "lyutils.h"
#include "auxlib.h"

astree yyparse_astree = NULL;
int scan_linenr = 1;
int scan_offset = 0;
bool scan_echo = false;

struct {
   char **filenames;
   int size;
   int last_filenr;
} filename_stack = {NULL, 0, -1};

char *scanner_filename (int filenr) {
   assert (filename_stack.filenames != NULL);
   return filename_stack.filenames[filenr];
}

void scanner_newfilename (char *filename) {
   assert (filename != NULL);
   if (filename_stack.filenames == NULL) {
      filename_stack.size = 16;
      filename_stack.last_filenr = -1;
      filename_stack.filenames
            = malloc (filename_stack.size * sizeof (char*));
      assert (filename_stack.filenames != NULL);
   }else if (filename_stack.last_filenr == filename_stack.size - 1) {
      filename_stack.size *= 2;
      filename_stack.filenames
            = realloc (filename_stack.filenames,
                       filename_stack.size * sizeof (char*));
      assert (filename_stack.filenames != NULL);
   }
   char *newfilename = strdup (filename);
   assert (newfilename != NULL);
   filename_stack.filenames[++filename_stack.last_filenr]
         = newfilename;
}

void scanner_newline (void) {
   ++scan_linenr;
   scan_offset = 0;
}

void scanner_setecho (bool echoflag) {
   scan_echo = echoflag;
}


void scanner_useraction (void) {
   if (scan_echo) {
      if (scan_offset == 0) printf (";%5d: ", scan_linenr);
      printf ("%s", yytext);
   }
   scan_offset += yyleng;
}

void yyerror (char *message) {
   assert (filename_stack.filenames != NULL);
   errprintf ("%:%s: %d: %s\n",
              filename_stack.filenames[filename_stack.last_filenr],
              scan_linenr, message);
}

void scanner_badchar (unsigned char bad) {
   char char_rep[16];
   sprintf (char_rep, isgraph ((int) bad) ? "%c" : "\\%03o", bad);
   errprintf ("%:%s: %d: invalid source character (%s)\n",
              filename_stack.filenames[filename_stack.last_filenr],
              scan_linenr, char_rep);
}

void scanner_badtoken (char *lexeme) {
   errprintf ("%:%s: %d: invalid token (%s)\n",
              filename_stack.filenames[filename_stack.last_filenr],
              scan_linenr, lexeme);
}

int yylval_token (int symbol) {
   int offset = scan_offset - yyleng;
   yylval = new_astree (symbol, filename_stack.last_filenr,
                        scan_linenr, offset, yytext);
   return symbol;
}

astree new_parseroot (void) {
   yyparse_astree = new_astree (ROOT, 0, 0, 0, "<<ROOT>>");
   return yyparse_astree;
}


void scanner_include (void) {
   scanner_newline();
   char *filename = alloca (strlen (yytext) + 1);
   int linenr;
   int scan_rc = sscanf (yytext, "# %d \"%[^\"]\"", &linenr, filename);
   if (scan_rc != 2) {
      errprintf ("%: %d: [%s]: invalid directive, ignored\n",
                 scan_rc, yytext);
   }else {
      char *newfilename = strdup (filename);
      assert (newfilename != NULL);
      printf (";# %d \"%s\"\n", linenr, newfilename);
      scanner_newfilename (newfilename);
      scan_linenr = linenr - 1;
      DEBUGF ('m', "filename=%s, scan_linenr=%d\n",
              filename_stack.filenames[filename_stack.last_filenr],
              scan_linenr);
   }
}

RCSC("$Id: lyutils.c,v 1.11 2012-10-11 18:22:20-07 - - $")

@


1.11
log
@-
@
text
@d122 1
a122 2
// LINTED(static unused)
RCSC(LYUTILS_C,"$Id: lyutils.c,v 1.10 2012-10-11 18:14:48-07 - - $")
@


1.10
log
@-
@
text
@d59 1
d101 1
d123 1
a123 1
RCSC(LYUTILS_C,"$Id: lyutils.c,v 1.9 2012-10-11 18:14:30-07 - - $")
@


1.9
log
@-
@
text
@d16 1
a16 1
bool scan_echo = FALSE;
d121 1
a121 1
RCSC(LYUTILS_C,"$Id: lyutils.c,v 1.8 2011-10-28 15:04:05-07 - - $")
@


1.8
log
@-
@
text
@d4 1
d121 1
a121 1
RCSC(LYUTILS_C,"$Id: lyutils.c,v 1.7 2011-09-21 18:54:07-07 - - $")
@


1.7
log
@-
@
text
@d110 1
a110 1
      printf (";#include \"%s\"\n", newfilename);
d112 1
a112 1
      scan_linenr = linenr;
d120 1
a120 1
RCSC(LYUTILS_C,"$Id: lyutils.c,v 1.6 2011-09-21 18:28:53-07 - - $")
@


1.6
log
@-
@
text
@d101 1
a101 1
   char filename[strlen (yytext) + 1];
d120 1
a120 1
RCSC(LYUTILS_C,"$Id: lyutils.c,v 1.5 2011-08-31 18:10:49-07 - - $")
@


1.5
log
@-
@
text
@d100 1
d110 1
d120 1
a120 1
RCSC(LYUTILS_C,"$Id: lyutils.c,v 1.4 2011-08-31 17:54:03-07 - - $")
@


1.4
log
@-
@
text
@a13 1
int scan_filenr = 0;
d20 1
a20 1
   int last;
d23 1
a23 1
char *scanner_filename (void) {
d25 1
a25 1
   return filename_stack.filenames[filename_stack.last];
d32 1
a32 1
      filename_stack.last = -1;
d36 1
a36 1
   }else if (last == size - 1) {
d39 2
a40 1
            = realloc (filename_stack.size * sizeof (char*));
d43 4
a46 2
   filename_stack.filenames[++last] = strdup (filename);
   assert (filename_stack.filenames[filename_stack.last] != NULL);
d68 2
a69 1
   errprintf ("%:%s: %d: %s\n", filename_stack.filenames[filename_stack.last],
d77 1
a77 1
              filename_stack.filenames[filename_stack.last],
d83 1
a83 1
              filename_stack.filenames[filename_stack.last],
d89 2
a90 2
   yylval = new_astree (symbol, scan_filenr, scan_linenr, offset,
                        yytext);
d112 1
a112 1
              filename_stack.filenames[filename_stack.last],
d118 1
a118 1
RCSC(LYUTILS_C,"$Id: lyutils.c,v 1.3 2010-10-08 18:06:06-07 - - $")
@


1.3
log
@-
@
text
@d2 1
d5 2
a12 2
char *yyin_filename = NULL;

d14 1
d18 29
d48 1
a48 1
   scan_linenr++;
d58 3
a60 3
      if (scan_offset == 0) xprintf (";%5d: ", scan_linenr);
      xprintf ("%s", yytext);
   };
d65 3
a67 1
   errprintf ("%:%s: %d: %s\n", yyin_filename, scan_linenr, message);
d72 1
a72 1
   xsprintf (char_rep, isgraph ((int) bad) ? "%c" : "\\%03o", bad);
d74 2
a75 1
              yyin_filename, scan_linenr, char_rep);
d80 2
a81 1
              yyin_filename, scan_linenr, lexeme);
d86 2
a87 1
   yylval = new_astree (symbol, scan_linenr, offset, yytext);
d92 1
a92 1
   yyparse_astree = new_astree (ROOT, 0, 0, "<<ROOT>>");
d96 18
d115 1
a115 1
RCSC(LYUTILS_C,"$Id: lyutils.c,v 1.2 2010-10-01 15:13:41-07 - - $")
@


1.2
log
@-
@
text
@d34 1
a34 1
   eprintf ("%:%s: %d: %s\n", yyin_filename, scan_linenr, message);
d40 2
a41 2
   eprintf ("%:%s: %d: invalid source character (%s)\n",
            yyin_filename, scan_linenr, char_rep);
d45 2
a46 2
   eprintf ("%:%s: %d: invalid token (%s)\n",
            yyin_filename, scan_linenr, lexeme);
d61 1
a61 1
RCSC(LYUTILS_C,"$Id: lyutils.c,v 1.1 2009-10-08 18:08:23-07 - - $")
@


1.1
log
@-
@
text
@d40 1
a40 1
   eprintf ("%:%s: %d: bad input character (%s)\n",
d44 5
d61 1
a61 1
RCSC(LYUTILS_C,"$Id: lyutils.c,v 1.1 2009-10-08 17:24:38-07 - - $")
@
