head	1.10;
access;
symbols;
locks;
comment	@ * @;


1.10
date	2013.08.22.20.58.43;	author -;	state -;
branches;
next	1.9;

1.9
date	2012.10.12.01.22.20;	author -;	state -;
branches;
next	1.8;

1.8
date	2011.10.07.05.05.30;	author -;	state -;
branches;
next	1.7;

1.7
date	2011.09.01.00.54.03;	author -;	state -;
branches;
next	1.6;

1.6
date	2010.10.22.00.59.06;	author -;	state -;
branches;
next	1.5;

1.5
date	2010.10.09.01.06.06;	author -;	state -;
branches;
next	1.4;

1.4
date	2010.10.08.21.56.36;	author -;	state -;
branches;
next	1.3;

1.3
date	2010.10.08.21.48.06;	author -;	state -;
branches;
next	1.2;

1.2
date	2010.10.07.23.42.32;	author -;	state -;
branches;
next	1.1;

1.1
date	2009.10.09.01.08.23;	author -;	state -;
branches;
next	;


desc
@@


1.10
log
@-
@
text
@#ifndef __AUXLIB_H__
#define __AUXLIB_H__

#include <stdarg.h>

//
// DESCRIPTION
//    Auxiliary library containing miscellaneous useful things.
//

//
// Error message and exit status utility.
//

void set_execname (char *argv0);
   //
   // Sets the program name for use by auxlib messages.
   // Must called from main before anything else is done,
   // passing in argv[0].
   //

char *get_execname (void);
   //
   // Returns a read-only value previously stored by set_progname.
   //

void eprint_status (char *command, int status);
   //
   // Print the status returned by wait(2) from a subprocess.
   //

int get_exitstatus (void);
   //
   // Returns the exit status.  Default is EXIT_SUCCESS unless
   // set_exitstatus (int) is called.  The last statement in main
   // should be:  ``return get_exitstatus();''.
   //

void set_exitstatus (int);
   //
   // Sets the exit status.  Remebers only the largest value passed in.
   //


void veprintf (char *format, va_list args);
   //
   // Prints a message to stderr using the vector form of 
   // argument list.
   //

void eprintf (char *format, ...);
   //
   // Print a message to stderr according to the printf format
   // specified.  Usually called for debug output.
   // Precedes the message by the program name if the format
   // begins with the characters `%:'.
   //

void errprintf (char *format, ...);
   //
   // Print an error message according to the printf format
   // specified, using eprintf.  Sets the exitstatus to EXIT_FAILURE.
   //

void syserrprintf (char *object);
   //
   // Print a message resulting from a bad system call.  The
   // object is the name of the object causing the problem and
   // the reason is taken from the external variable errno.
   //


//
// Support for stub messages.
//
#define STUBPRINTF(...) \
        __stubprintf (__FILE__, __LINE__, __func__, __VA_ARGS__)
void __stubprintf (char *file, int line, const char *func,
                   char *format, ...);

//
// Debugging utility.
//

void set_debugflags (char *flags);
   //
   // Sets a string of debug flags to be used by DEBUGF statements.
   // Uses the address of the string, and does not copy it, so it
   // must not be dangling.  If a particular debug flag has been set,
   // messages are printed.  The format is identical to printf format.
   // The flag "@@" turns on all flags.
   //

bool is_debugflag (char flag);
   //
   // Checks to see if a debugflag is set.
   //

#ifdef NDEBUG
// Do not generate any code.
#define DEBUGF(FLAG,...)   /**/
#define DEBUGSTMT(FLAG,STMTS) /**/
#else
// Generate debugging code.
void __debugprintf (char flag, char *file, int line, const char *func,
                    char *format, ...);
#define DEBUGF(FLAG,...) \
        __debugprintf (FLAG, __FILE__, __LINE__, __func__, __VA_ARGS__)
#define DEBUGSTMT(FLAG,STMTS) \
        if (is_debugflag (FLAG)) { DEBUGF (FLAG, "\n"); STMTS }
#endif

//
// Definition of RCSID macro to include RCS info in objs and execbin.
//

#define RCS3(ID,N,X) static const char ID##N[] = X;
#define RCS2(N,X) RCS3(RCS_Id,N,X)
#define RCSH(X) RCS2(__COUNTER__,X)
#define RCSC(X) RCSH(X \
"\0$Compiled: " __FILE__ " " __DATE__ " " __TIME__ " $")
RCSH("$Id: auxlib.h,v 1.9 2012-10-11 18:22:20-07 - - $") 
#endif
@


1.9
log
@-
@
text
@a115 5
#define RCSH(NAME,ID) \
static const char __RCS_##NAME[] = "\0" ID;
#define RCSC(NAME,ID) \
static const char __RCS_C_##NAME[] = "\0" ID \
"\0$Compiled: " __FILE__ " " __DATE__ " " __TIME__ " $";
d117 6
a122 2
// LINTED(static unused)
RCSH(AUXLIB_H,"$Id: auxlib.h,v 1.8 2011-10-06 22:05:30-07 - - $")
@


1.8
log
@-
@
text
@a11 6
// Miscellaneous useful typedefs.
//

typedef enum {FALSE = 0, TRUE = 1} bool;

//
d27 18
d72 1
a72 17
void eprint_status (char *command, int status);
   //
   // Print the status returned by wait(2) from a subprocess.
   //

int get_exitstatus (void);
   //
   // Returns the exit status.  Default is EXIT_SUCCESS unless
   // set_exitstatus (int) is called.  The last statement in main
   // should be:  ``return get_exitstatus();''.
   //

void set_exitstatus (int);
   //
   // Sets the exit status.  Remebers only the largest value passed in.
   //

d123 1
a123 1
RCSH(AUXLIB_H,"$Id: auxlib.h,v 1.7 2011-08-31 17:54:03-07 - - $")
@


1.7
log
@-
@
text
@a0 1

d127 1
a127 1
RCSH(AUXLIB_H,"$Id: auxlib.h,v 1.6 2010-10-21 17:59:06-07 - - $")
a128 1

@


1.6
log
@-
@
text
@d61 5
a78 17
// Redefinition of a few functions to keep lint from whining about
// ``function returns value which is always ignored''.  This is not
// generally recommended, but illustrates a very hackish way of
// keeping lint quiet.  Generally, it is recommended just to ignore
// that particular message.
//

#define xfclose   (void) fclose
#define xfflush   (void) fflush
#define xfprintf  (void) fprintf
#define xmemset   (void) memset
#define xprintf   (void) printf
#define xsprintf  (void) sprintf
#define xvfprintf (void) vfprintf
#define xvprintf  (void) vprintf

//
d128 1
a128 1
RCSH(AUXLIB_H,"$Id: auxlib.h,v 1.5 2010-10-08 18:06:06-07 - - $")
@


1.5
log
@-
@
text
@d5 2
d140 1
a140 1
RCSH(AUXLIB_H,"$Id: auxlib.h,v 1.4 2010-10-08 14:56:36-07 - - $")
@


1.4
log
@-
@
text
@d32 7
a38 1
void dprintf (char *format, ...);
d46 1
a46 1
void eprintf (char *format, ...);
d49 1
a49 2
   // specified.  Precedes the message by the program name if
   // the format begins with the characters "%:".
d52 1
a52 1
void syseprintf (char *object);
d115 3
a117 1
#define DEBUGF(FLAG,...) // DEBUG (FLAG, __VA_ARGS__)
d119 3
d124 2
a125 2
void __debugprintf (char flag, char *file, int line, const char *func,
                    char *format, ...);
d138 1
a138 1
RCSH(AUXLIB_H,"$Id: auxlib.h,v 1.3 2010-10-08 14:48:06-07 - - $")
@


1.3
log
@-
@
text
@d104 5
d128 1
a128 1
RCSH(AUXLIB_H,"$Id: auxlib.h,v 1.2 2010-10-07 16:42:32-07 - - $")
@


1.2
log
@-
@
text
@d108 2
a109 2
        __debugprintf (FLAG, __FILE__, __LINE__, __VA_ARGS__)
void __debugprintf (char flag, char *file, int line,
d123 1
a123 1
RCSH(AUXLIB_H,"$Id: auxlib.h,v 1.1 2009-10-08 18:08:23-07 - - $")
@


1.1
log
@-
@
text
@d17 1
a17 1
// Error message and exit code utility.
d20 1
a20 1
void set_progname (char *arg0);
d22 3
a24 3
   // Sets the program name for error messages printed by this
   // library.  Usually just called with argv[0].  Extracts the
   // basename of the filename.
d27 1
a27 1
char *get_progname (void);
d29 1
a29 1
   // Returns a read-only value previously stored by `set_progname'.
d34 1
a34 1
   // Print an message to stderr according to the printf format
d42 3
a44 3
   // Calls dprintf to print a message to stderr, then sets
   // the exit code to indicate failure.  Usually called to
   // report errors.
d51 1
a51 1
   // the reason is taken from the external variabl errno.
d54 1
a54 1
int get_exitcode (void);
d56 3
a58 4
   // Returns the exit code set by the above functions.  Default
   // is EXIT_SUCCESS, but any call to eprintf causes it to be
   // set to EXIT_FAILURE.  The last statement in function `main'
   // should be:  ``return get_exitcode();''.
d61 30
d97 5
a101 5
   // Sets the debugflags in the give string.  When `DEBUG' is
   // called with one of those flags as the first argument,
   // output is generated.  Special cases:
   // '+' turns on all of the flags
   // '-' turns off all flags following the '-'.
d105 1
a105 1
#define DEBUG(FLAG,...) // DEBUG (FLAG, __VA_ARGS__)
d107 1
a107 1
#define DEBUG(FLAG,...) \
a111 21
   //
   // Macro: DEBUG (flag, format, fmtargs)
   //
   // If the flag is turned on, a debug message is printed to stderr.
   // This works like `dprintf', except that the message is preceded
   // by the file and line number, and the exit code is not set.
   // Generally, the macro `DEBUG' should be used.  `__debugprintf'
   // should not be called directly.
   //

//
// Redefinition of a few functions to keep lint from whining about
// ``function returns value which is always ignored''
//

#define xfflush   (void) fflush
#define xfprintf  (void) fprintf
#define xmemset   (void) memset
#define xprintf   (void) printf
#define xsprintf  (void) sprintf
#define xvfprintf (void) vfprintf
d123 1
a123 1
RCSH(AUXLIB_H,"$Id: auxlib.h,v 1.1 2009-10-08 17:24:38-07 - - $")
@
