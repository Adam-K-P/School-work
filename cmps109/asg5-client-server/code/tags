!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CIXDOBJS	Makefile	/^CIXDOBJS = cixd.o ${LIBOBJS}$/;"	m
CIXOBJS	Makefile	/^CIXOBJS  = cix.o ${LIBOBJS}$/;"	m
CIX_ACK	protocol.h	/^                  CIX_FILE, CIX_LSOUT, CIX_ACK, CIX_NAK};$/;"	e	enum:cix_command
CIX_ERROR	protocol.h	/^enum cix_command {CIX_ERROR = 0, CIX_EXIT,$/;"	e	enum:cix_command
CIX_EXIT	protocol.h	/^enum cix_command {CIX_ERROR = 0, CIX_EXIT,$/;"	e	enum:cix_command
CIX_FILE	protocol.h	/^                  CIX_FILE, CIX_LSOUT, CIX_ACK, CIX_NAK};$/;"	e	enum:cix_command
CIX_GET	protocol.h	/^                  CIX_GET, CIX_HELP, CIX_LS, CIX_PUT, CIX_RM,$/;"	e	enum:cix_command
CIX_HELP	protocol.h	/^                  CIX_GET, CIX_HELP, CIX_LS, CIX_PUT, CIX_RM,$/;"	e	enum:cix_command
CIX_LS	protocol.h	/^                  CIX_GET, CIX_HELP, CIX_LS, CIX_PUT, CIX_RM,$/;"	e	enum:cix_command
CIX_LSOUT	protocol.h	/^                  CIX_FILE, CIX_LSOUT, CIX_ACK, CIX_NAK};$/;"	e	enum:cix_command
CIX_NAK	protocol.h	/^                  CIX_FILE, CIX_LSOUT, CIX_ACK, CIX_NAK};$/;"	e	enum:cix_command
CIX_PUT	protocol.h	/^                  CIX_GET, CIX_HELP, CIX_LS, CIX_PUT, CIX_RM,$/;"	e	enum:cix_command
CIX_RM	protocol.h	/^                  CIX_GET, CIX_HELP, CIX_LS, CIX_PUT, CIX_RM,$/;"	e	enum:cix_command
CLOSED_FD	sockets.h	/^      static constexpr int CLOSED_FD = -1;$/;"	m	class:base_socket
CPPLIBS	Makefile	/^CPPLIBS  = sockets.cpp protocol.cpp $/;"	m
CPPSRCS	Makefile	/^CPPSRCS  = ${CPPLIBS} cix.cpp cixd.cpp$/;"	m
DEPFILE	Makefile	/^DEPFILE  = Makefile.dep$/;"	m
EXECBINS	Makefile	/^EXECBINS = cix cixd$/;"	m
FILENAME_SIZE	protocol.h	/^size_t constexpr FILENAME_SIZE = 59;$/;"	v
GPP	Makefile	/^GPP      = g++ -g -O0 -Wall -Wextra -std=gnu++11$/;"	m
HEADERS	Makefile	/^HEADERS  = sockets.h protocol.h logstream.h$/;"	m
LIBOBJS	Makefile	/^LIBOBJS  = ${CPPLIBS:.cpp=.o}$/;"	m
LISTING	Makefile	/^LISTING  = Listing.ps$/;"	m
MAXRECV	sockets.h	/^      static constexpr size_t MAXRECV = 0xFFFF;$/;"	m	class:base_socket
OBJECTS	Makefile	/^OBJECTS  = ${CIXOBJS} ${CIXDOBJS}$/;"	m
SOURCES	Makefile	/^SOURCES  = ${HEADERS} ${CPPSRCS} Makefile$/;"	m
__LOGSTREAM_H__	logstream.h	12;"	d
__PROTOCOL__H__	protocol.h	4;"	d
__SOCKET_H__	sockets.h	4;"	d
accept	sockets.cpp	/^void base_socket::accept (base_socket& socket) const {$/;"	f	class:base_socket
accept	sockets.h	/^      void accept (accepted_socket& sock) {$/;"	f	class:server_socket
accepted_socket	sockets.h	/^      accepted_socket() {}$/;"	f	class:accepted_socket
accepted_socket	sockets.h	/^      accepted_socket(int fd) { set_socket_fd (fd); }$/;"	f	class:accepted_socket
accepted_socket	sockets.h	/^class accepted_socket: public base_socket {$/;"	c
addresses	sockets.h	/^      const vector<in_addr> addresses;$/;"	m	class:hostinfo
aliases	sockets.h	/^      const vector<string> aliases;$/;"	m	class:hostinfo
base_socket	sockets.cpp	/^base_socket::base_socket() {$/;"	f	class:base_socket
base_socket	sockets.h	/^class base_socket {$/;"	c
bind	sockets.cpp	/^void base_socket::bind (const in_port_t port) {$/;"	f	class:base_socket
cix_command	protocol.h	/^enum cix_command {CIX_ERROR = 0, CIX_EXIT,$/;"	g
cix_exit	cix.cpp	/^struct cix_exit: public exception {};$/;"	s	file:
cix_exit	cixd.cpp	/^struct cix_exit: public exception {};$/;"	s	file:
cix_header	protocol.h	/^struct cix_header {$/;"	s
cix_help	cix.cpp	/^void cix_help() {$/;"	f
cix_ls	cix.cpp	/^void cix_ls (client_socket& server) {$/;"	f
client_socket	sockets.cpp	/^client_socket::client_socket (string host, in_port_t port) {$/;"	f	class:client_socket
client_socket	sockets.h	/^class client_socket: public base_socket {$/;"	c
close	sockets.cpp	/^void base_socket::close() {$/;"	f	class:base_socket
connect	sockets.cpp	/^void base_socket::connect (const string host, const in_port_t port) {$/;"	f	class:base_socket
create	sockets.cpp	/^void base_socket::create() {$/;"	f	class:base_socket
execname	logstream.h	/^      string execname() { return execname_; }$/;"	f	class:logstream
execname	logstream.h	/^      void execname (const string& name) { execname_ = name; }$/;"	f	class:logstream
execname_	logstream.h	/^      string execname_;$/;"	m	class:logstream
fork_cixserver	cixd.cpp	/^void fork_cixserver (server_socket& server, accepted_socket& accept) {$/;"	f
get_cix_server_host	protocol.cpp	/^string get_cix_server_host (const vector<string>& args, size_t index) {$/;"	f
get_cix_server_port	protocol.cpp	/^in_port_t get_cix_server_port (const vector<string>& args,$/;"	f
host_errno	sockets.h	/^      int host_errno;$/;"	m	class:socket_h_error
hostinfo	sockets.cpp	/^hostinfo::hostinfo (const in_addr& ipv4_addr):$/;"	f	class:hostinfo
hostinfo	sockets.cpp	/^hostinfo::hostinfo (const string& hostname):$/;"	f	class:hostinfo
hostinfo	sockets.cpp	/^hostinfo::hostinfo (hostent* host):$/;"	f	class:hostinfo
hostinfo	sockets.cpp	/^hostinfo::hostinfo(): hostinfo (localhost()) {$/;"	f	class:hostinfo
hostinfo	sockets.h	/^class hostinfo {$/;"	c
hostname	sockets.h	/^      const string hostname;$/;"	m	class:hostinfo
init_addresses	sockets.cpp	/^vector<in_addr> init_addresses (hostent* host) {$/;"	f
init_aliases	sockets.cpp	/^vector<string> init_aliases (hostent* host) {$/;"	f
init_hostname	sockets.cpp	/^string init_hostname (hostent* host) {$/;"	f
listen	sockets.cpp	/^void base_socket::listen() const {$/;"	f	class:base_socket
localhost	sockets.cpp	/^string localhost() {$/;"	f
logstream	logstream.h	/^      logstream (ostream& out, const string& execname = ""):$/;"	f	class:logstream
logstream	logstream.h	/^class logstream {$/;"	c
main	cix.cpp	/^int main (int argc, char** argv) {$/;"	f
main	cixd.cpp	/^int main (int argc, char** argv) {$/;"	f
operator <<	logstream.h	/^      ostream& operator<< (const T& obj) {$/;"	f	class:logstream
operator <<	protocol.cpp	/^ostream& operator<< (ostream& out, const cix_header& header) {$/;"	f
out	logstream.h	/^      ostream& out;$/;"	m	class:logstream
reap_zombies	cixd.cpp	/^void reap_zombies() {$/;"	f
recv	sockets.cpp	/^ssize_t base_socket::recv (void* buffer, size_t bufsize) {$/;"	f	class:base_socket
recv_packet	protocol.cpp	/^void recv_packet (base_socket& socket, void* buffer, size_t bufsize) {$/;"	f
reply_ls	cixd.cpp	/^void reply_ls (accepted_socket& client_sock, cix_header& header) {$/;"	f
run_server	cixd.cpp	/^void run_server (accepted_socket& client_sock) {$/;"	f
send	sockets.cpp	/^ssize_t base_socket::send (const void* buffer, size_t bufsize) {$/;"	f	class:base_socket
send_packet	protocol.cpp	/^void send_packet (base_socket& socket,$/;"	f
server_socket	sockets.cpp	/^server_socket::server_socket (in_port_t port) {$/;"	f	class:server_socket
server_socket	sockets.h	/^class server_socket: public base_socket {$/;"	c
set_non_blocking	sockets.cpp	/^void base_socket::set_non_blocking (const bool blocking) {$/;"	f	class:base_socket
set_socket_fd	sockets.cpp	/^void base_socket::set_socket_fd (int fd) {$/;"	f	class:base_socket
signal_action	cixd.cpp	/^void signal_action (int signal, void (*handler) (int)) {$/;"	f
signal_handler	cixd.cpp	/^void signal_handler (int signal) {$/;"	f
socket_addr	sockets.h	/^      sockaddr_in socket_addr;$/;"	m	class:base_socket
socket_error	sockets.h	/^      explicit socket_error (const string& what): runtime_error(what){}$/;"	f	class:socket_error
socket_error	sockets.h	/^class socket_error: public runtime_error {$/;"	c
socket_h_error	sockets.h	/^      explicit socket_h_error (const string& what):$/;"	f	class:socket_h_error
socket_h_error	sockets.h	/^class socket_h_error: public socket_error {$/;"	c
socket_sys_error	sockets.h	/^      explicit socket_sys_error (const string& what):$/;"	f	class:socket_sys_error
socket_sys_error	sockets.h	/^class socket_sys_error: public socket_error {$/;"	c
sys_errno	sockets.h	/^      int sys_errno;$/;"	m	class:socket_sys_error
to_string	sockets.cpp	/^string to_string (const base_socket& sock) {$/;"	f
to_string	sockets.cpp	/^string to_string (const hostinfo& info) {$/;"	f
to_string	sockets.cpp	/^string to_string (const in_addr& ipv4_addr) { $/;"	f
usage	cix.cpp	/^void usage() {$/;"	f
~base_socket	sockets.cpp	/^base_socket::~base_socket() {$/;"	f	class:base_socket
